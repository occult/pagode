// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/user"
)

// PaymentCustomer is the model entity for the PaymentCustomer schema.
type PaymentCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// External payment provider customer ID (e.g., Stripe customer ID)
	ProviderCustomerID string `json:"provider_customer_id,omitempty"`
	// Payment provider name
	Provider string `json:"provider,omitempty"`
	// Customer email from payment provider
	Email string `json:"email,omitempty"`
	// Customer name from payment provider
	Name string `json:"name,omitempty"`
	// Additional customer data from payment provider
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentCustomerQuery when eager-loading is set.
	Edges        PaymentCustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentCustomerEdges holds the relations/edges for other nodes in the graph.
type PaymentCustomerEdges struct {
	// User associated with this payment customer
	User *User `json:"user,omitempty"`
	// Payment intents for this customer
	PaymentIntents []*PaymentIntent `json:"payment_intents,omitempty"`
	// Subscriptions for this customer
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// Payment methods for this customer
	PaymentMethods []*PaymentMethod `json:"payment_methods,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentCustomerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PaymentIntentsOrErr returns the PaymentIntents value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentCustomerEdges) PaymentIntentsOrErr() ([]*PaymentIntent, error) {
	if e.loadedTypes[1] {
		return e.PaymentIntents, nil
	}
	return nil, &NotLoadedError{edge: "payment_intents"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentCustomerEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[2] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// PaymentMethodsOrErr returns the PaymentMethods value or an error if the edge
// was not loaded in eager-loading.
func (e PaymentCustomerEdges) PaymentMethodsOrErr() ([]*PaymentMethod, error) {
	if e.loadedTypes[3] {
		return e.PaymentMethods, nil
	}
	return nil, &NotLoadedError{edge: "payment_methods"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentcustomer.FieldMetadata:
			values[i] = new([]byte)
		case paymentcustomer.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentcustomer.FieldProviderCustomerID, paymentcustomer.FieldProvider, paymentcustomer.FieldEmail, paymentcustomer.FieldName:
			values[i] = new(sql.NullString)
		case paymentcustomer.FieldCreatedAt, paymentcustomer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentCustomer fields.
func (pc *PaymentCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentcustomer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case paymentcustomer.FieldProviderCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_customer_id", values[i])
			} else if value.Valid {
				pc.ProviderCustomerID = value.String
			}
		case paymentcustomer.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pc.Provider = value.String
			}
		case paymentcustomer.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pc.Email = value.String
			}
		case paymentcustomer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case paymentcustomer.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case paymentcustomer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case paymentcustomer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentCustomer.
// This includes values selected through modifiers, order, etc.
func (pc *PaymentCustomer) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PaymentCustomer entity.
func (pc *PaymentCustomer) QueryUser() *UserQuery {
	return NewPaymentCustomerClient(pc.config).QueryUser(pc)
}

// QueryPaymentIntents queries the "payment_intents" edge of the PaymentCustomer entity.
func (pc *PaymentCustomer) QueryPaymentIntents() *PaymentIntentQuery {
	return NewPaymentCustomerClient(pc.config).QueryPaymentIntents(pc)
}

// QuerySubscriptions queries the "subscriptions" edge of the PaymentCustomer entity.
func (pc *PaymentCustomer) QuerySubscriptions() *SubscriptionQuery {
	return NewPaymentCustomerClient(pc.config).QuerySubscriptions(pc)
}

// QueryPaymentMethods queries the "payment_methods" edge of the PaymentCustomer entity.
func (pc *PaymentCustomer) QueryPaymentMethods() *PaymentMethodQuery {
	return NewPaymentCustomerClient(pc.config).QueryPaymentMethods(pc)
}

// Update returns a builder for updating this PaymentCustomer.
// Note that you need to call PaymentCustomer.Unwrap() before calling this method if this PaymentCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PaymentCustomer) Update() *PaymentCustomerUpdateOne {
	return NewPaymentCustomerClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PaymentCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PaymentCustomer) Unwrap() *PaymentCustomer {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentCustomer is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PaymentCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("provider_customer_id=")
	builder.WriteString(pc.ProviderCustomerID)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(pc.Provider)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pc.Email)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pc.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentCustomers is a parsable slice of PaymentCustomer.
type PaymentCustomers []*PaymentCustomer
