// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentintent"
	"github.com/occult/pagode/ent/predicate"
)

// PaymentIntentUpdate is the builder for updating PaymentIntent entities.
type PaymentIntentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentIntentMutation
}

// Where appends a list predicates to the PaymentIntentUpdate builder.
func (piu *PaymentIntentUpdate) Where(ps ...predicate.PaymentIntent) *PaymentIntentUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetProviderPaymentIntentID sets the "provider_payment_intent_id" field.
func (piu *PaymentIntentUpdate) SetProviderPaymentIntentID(s string) *PaymentIntentUpdate {
	piu.mutation.SetProviderPaymentIntentID(s)
	return piu
}

// SetNillableProviderPaymentIntentID sets the "provider_payment_intent_id" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableProviderPaymentIntentID(s *string) *PaymentIntentUpdate {
	if s != nil {
		piu.SetProviderPaymentIntentID(*s)
	}
	return piu
}

// SetProvider sets the "provider" field.
func (piu *PaymentIntentUpdate) SetProvider(s string) *PaymentIntentUpdate {
	piu.mutation.SetProvider(s)
	return piu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableProvider(s *string) *PaymentIntentUpdate {
	if s != nil {
		piu.SetProvider(*s)
	}
	return piu
}

// SetStatus sets the "status" field.
func (piu *PaymentIntentUpdate) SetStatus(pa paymentintent.Status) *PaymentIntentUpdate {
	piu.mutation.SetStatus(pa)
	return piu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableStatus(pa *paymentintent.Status) *PaymentIntentUpdate {
	if pa != nil {
		piu.SetStatus(*pa)
	}
	return piu
}

// SetAmount sets the "amount" field.
func (piu *PaymentIntentUpdate) SetAmount(i int64) *PaymentIntentUpdate {
	piu.mutation.ResetAmount()
	piu.mutation.SetAmount(i)
	return piu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableAmount(i *int64) *PaymentIntentUpdate {
	if i != nil {
		piu.SetAmount(*i)
	}
	return piu
}

// AddAmount adds i to the "amount" field.
func (piu *PaymentIntentUpdate) AddAmount(i int64) *PaymentIntentUpdate {
	piu.mutation.AddAmount(i)
	return piu
}

// SetCurrency sets the "currency" field.
func (piu *PaymentIntentUpdate) SetCurrency(s string) *PaymentIntentUpdate {
	piu.mutation.SetCurrency(s)
	return piu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableCurrency(s *string) *PaymentIntentUpdate {
	if s != nil {
		piu.SetCurrency(*s)
	}
	return piu
}

// SetDescription sets the "description" field.
func (piu *PaymentIntentUpdate) SetDescription(s string) *PaymentIntentUpdate {
	piu.mutation.SetDescription(s)
	return piu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableDescription(s *string) *PaymentIntentUpdate {
	if s != nil {
		piu.SetDescription(*s)
	}
	return piu
}

// ClearDescription clears the value of the "description" field.
func (piu *PaymentIntentUpdate) ClearDescription() *PaymentIntentUpdate {
	piu.mutation.ClearDescription()
	return piu
}

// SetClientSecret sets the "client_secret" field.
func (piu *PaymentIntentUpdate) SetClientSecret(s string) *PaymentIntentUpdate {
	piu.mutation.SetClientSecret(s)
	return piu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (piu *PaymentIntentUpdate) SetNillableClientSecret(s *string) *PaymentIntentUpdate {
	if s != nil {
		piu.SetClientSecret(*s)
	}
	return piu
}

// ClearClientSecret clears the value of the "client_secret" field.
func (piu *PaymentIntentUpdate) ClearClientSecret() *PaymentIntentUpdate {
	piu.mutation.ClearClientSecret()
	return piu
}

// SetMetadata sets the "metadata" field.
func (piu *PaymentIntentUpdate) SetMetadata(m map[string]interface{}) *PaymentIntentUpdate {
	piu.mutation.SetMetadata(m)
	return piu
}

// ClearMetadata clears the value of the "metadata" field.
func (piu *PaymentIntentUpdate) ClearMetadata() *PaymentIntentUpdate {
	piu.mutation.ClearMetadata()
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PaymentIntentUpdate) SetUpdatedAt(t time.Time) *PaymentIntentUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetCustomerID sets the "customer" edge to the PaymentCustomer entity by ID.
func (piu *PaymentIntentUpdate) SetCustomerID(id int) *PaymentIntentUpdate {
	piu.mutation.SetCustomerID(id)
	return piu
}

// SetCustomer sets the "customer" edge to the PaymentCustomer entity.
func (piu *PaymentIntentUpdate) SetCustomer(p *PaymentCustomer) *PaymentIntentUpdate {
	return piu.SetCustomerID(p.ID)
}

// Mutation returns the PaymentIntentMutation object of the builder.
func (piu *PaymentIntentUpdate) Mutation() *PaymentIntentMutation {
	return piu.mutation
}

// ClearCustomer clears the "customer" edge to the PaymentCustomer entity.
func (piu *PaymentIntentUpdate) ClearCustomer() *PaymentIntentUpdate {
	piu.mutation.ClearCustomer()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PaymentIntentUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PaymentIntentUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PaymentIntentUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PaymentIntentUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *PaymentIntentUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := paymentintent.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PaymentIntentUpdate) check() error {
	if v, ok := piu.mutation.ProviderPaymentIntentID(); ok {
		if err := paymentintent.ProviderPaymentIntentIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_payment_intent_id", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.provider_payment_intent_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Provider(); ok {
		if err := paymentintent.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.provider": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Status(); ok {
		if err := paymentintent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.status": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Amount(); ok {
		if err := paymentintent.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.amount": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Currency(); ok {
		if err := paymentintent.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.currency": %w`, err)}
		}
	}
	if piu.mutation.CustomerCleared() && len(piu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentIntent.customer"`)
	}
	return nil
}

func (piu *PaymentIntentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentintent.Table, paymentintent.Columns, sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ProviderPaymentIntentID(); ok {
		_spec.SetField(paymentintent.FieldProviderPaymentIntentID, field.TypeString, value)
	}
	if value, ok := piu.mutation.Provider(); ok {
		_spec.SetField(paymentintent.FieldProvider, field.TypeString, value)
	}
	if value, ok := piu.mutation.Status(); ok {
		_spec.SetField(paymentintent.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := piu.mutation.Amount(); ok {
		_spec.SetField(paymentintent.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.AddedAmount(); ok {
		_spec.AddField(paymentintent.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.Currency(); ok {
		_spec.SetField(paymentintent.FieldCurrency, field.TypeString, value)
	}
	if value, ok := piu.mutation.Description(); ok {
		_spec.SetField(paymentintent.FieldDescription, field.TypeString, value)
	}
	if piu.mutation.DescriptionCleared() {
		_spec.ClearField(paymentintent.FieldDescription, field.TypeString)
	}
	if value, ok := piu.mutation.ClientSecret(); ok {
		_spec.SetField(paymentintent.FieldClientSecret, field.TypeString, value)
	}
	if piu.mutation.ClientSecretCleared() {
		_spec.ClearField(paymentintent.FieldClientSecret, field.TypeString)
	}
	if value, ok := piu.mutation.Metadata(); ok {
		_spec.SetField(paymentintent.FieldMetadata, field.TypeJSON, value)
	}
	if piu.mutation.MetadataCleared() {
		_spec.ClearField(paymentintent.FieldMetadata, field.TypeJSON)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentintent.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentintent.CustomerTable,
			Columns: []string{paymentintent.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentintent.CustomerTable,
			Columns: []string{paymentintent.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentintent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PaymentIntentUpdateOne is the builder for updating a single PaymentIntent entity.
type PaymentIntentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentIntentMutation
}

// SetProviderPaymentIntentID sets the "provider_payment_intent_id" field.
func (piuo *PaymentIntentUpdateOne) SetProviderPaymentIntentID(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetProviderPaymentIntentID(s)
	return piuo
}

// SetNillableProviderPaymentIntentID sets the "provider_payment_intent_id" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableProviderPaymentIntentID(s *string) *PaymentIntentUpdateOne {
	if s != nil {
		piuo.SetProviderPaymentIntentID(*s)
	}
	return piuo
}

// SetProvider sets the "provider" field.
func (piuo *PaymentIntentUpdateOne) SetProvider(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetProvider(s)
	return piuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableProvider(s *string) *PaymentIntentUpdateOne {
	if s != nil {
		piuo.SetProvider(*s)
	}
	return piuo
}

// SetStatus sets the "status" field.
func (piuo *PaymentIntentUpdateOne) SetStatus(pa paymentintent.Status) *PaymentIntentUpdateOne {
	piuo.mutation.SetStatus(pa)
	return piuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableStatus(pa *paymentintent.Status) *PaymentIntentUpdateOne {
	if pa != nil {
		piuo.SetStatus(*pa)
	}
	return piuo
}

// SetAmount sets the "amount" field.
func (piuo *PaymentIntentUpdateOne) SetAmount(i int64) *PaymentIntentUpdateOne {
	piuo.mutation.ResetAmount()
	piuo.mutation.SetAmount(i)
	return piuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableAmount(i *int64) *PaymentIntentUpdateOne {
	if i != nil {
		piuo.SetAmount(*i)
	}
	return piuo
}

// AddAmount adds i to the "amount" field.
func (piuo *PaymentIntentUpdateOne) AddAmount(i int64) *PaymentIntentUpdateOne {
	piuo.mutation.AddAmount(i)
	return piuo
}

// SetCurrency sets the "currency" field.
func (piuo *PaymentIntentUpdateOne) SetCurrency(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetCurrency(s)
	return piuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableCurrency(s *string) *PaymentIntentUpdateOne {
	if s != nil {
		piuo.SetCurrency(*s)
	}
	return piuo
}

// SetDescription sets the "description" field.
func (piuo *PaymentIntentUpdateOne) SetDescription(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetDescription(s)
	return piuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableDescription(s *string) *PaymentIntentUpdateOne {
	if s != nil {
		piuo.SetDescription(*s)
	}
	return piuo
}

// ClearDescription clears the value of the "description" field.
func (piuo *PaymentIntentUpdateOne) ClearDescription() *PaymentIntentUpdateOne {
	piuo.mutation.ClearDescription()
	return piuo
}

// SetClientSecret sets the "client_secret" field.
func (piuo *PaymentIntentUpdateOne) SetClientSecret(s string) *PaymentIntentUpdateOne {
	piuo.mutation.SetClientSecret(s)
	return piuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (piuo *PaymentIntentUpdateOne) SetNillableClientSecret(s *string) *PaymentIntentUpdateOne {
	if s != nil {
		piuo.SetClientSecret(*s)
	}
	return piuo
}

// ClearClientSecret clears the value of the "client_secret" field.
func (piuo *PaymentIntentUpdateOne) ClearClientSecret() *PaymentIntentUpdateOne {
	piuo.mutation.ClearClientSecret()
	return piuo
}

// SetMetadata sets the "metadata" field.
func (piuo *PaymentIntentUpdateOne) SetMetadata(m map[string]interface{}) *PaymentIntentUpdateOne {
	piuo.mutation.SetMetadata(m)
	return piuo
}

// ClearMetadata clears the value of the "metadata" field.
func (piuo *PaymentIntentUpdateOne) ClearMetadata() *PaymentIntentUpdateOne {
	piuo.mutation.ClearMetadata()
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PaymentIntentUpdateOne) SetUpdatedAt(t time.Time) *PaymentIntentUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetCustomerID sets the "customer" edge to the PaymentCustomer entity by ID.
func (piuo *PaymentIntentUpdateOne) SetCustomerID(id int) *PaymentIntentUpdateOne {
	piuo.mutation.SetCustomerID(id)
	return piuo
}

// SetCustomer sets the "customer" edge to the PaymentCustomer entity.
func (piuo *PaymentIntentUpdateOne) SetCustomer(p *PaymentCustomer) *PaymentIntentUpdateOne {
	return piuo.SetCustomerID(p.ID)
}

// Mutation returns the PaymentIntentMutation object of the builder.
func (piuo *PaymentIntentUpdateOne) Mutation() *PaymentIntentMutation {
	return piuo.mutation
}

// ClearCustomer clears the "customer" edge to the PaymentCustomer entity.
func (piuo *PaymentIntentUpdateOne) ClearCustomer() *PaymentIntentUpdateOne {
	piuo.mutation.ClearCustomer()
	return piuo
}

// Where appends a list predicates to the PaymentIntentUpdate builder.
func (piuo *PaymentIntentUpdateOne) Where(ps ...predicate.PaymentIntent) *PaymentIntentUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PaymentIntentUpdateOne) Select(field string, fields ...string) *PaymentIntentUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PaymentIntent entity.
func (piuo *PaymentIntentUpdateOne) Save(ctx context.Context) (*PaymentIntent, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PaymentIntentUpdateOne) SaveX(ctx context.Context) *PaymentIntent {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PaymentIntentUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PaymentIntentUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *PaymentIntentUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := paymentintent.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PaymentIntentUpdateOne) check() error {
	if v, ok := piuo.mutation.ProviderPaymentIntentID(); ok {
		if err := paymentintent.ProviderPaymentIntentIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_payment_intent_id", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.provider_payment_intent_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Provider(); ok {
		if err := paymentintent.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.provider": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Status(); ok {
		if err := paymentintent.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.status": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Amount(); ok {
		if err := paymentintent.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.amount": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Currency(); ok {
		if err := paymentintent.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "PaymentIntent.currency": %w`, err)}
		}
	}
	if piuo.mutation.CustomerCleared() && len(piuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentIntent.customer"`)
	}
	return nil
}

func (piuo *PaymentIntentUpdateOne) sqlSave(ctx context.Context) (_node *PaymentIntent, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentintent.Table, paymentintent.Columns, sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentIntent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentintent.FieldID)
		for _, f := range fields {
			if !paymentintent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentintent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ProviderPaymentIntentID(); ok {
		_spec.SetField(paymentintent.FieldProviderPaymentIntentID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Provider(); ok {
		_spec.SetField(paymentintent.FieldProvider, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Status(); ok {
		_spec.SetField(paymentintent.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := piuo.mutation.Amount(); ok {
		_spec.SetField(paymentintent.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.AddedAmount(); ok {
		_spec.AddField(paymentintent.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.Currency(); ok {
		_spec.SetField(paymentintent.FieldCurrency, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Description(); ok {
		_spec.SetField(paymentintent.FieldDescription, field.TypeString, value)
	}
	if piuo.mutation.DescriptionCleared() {
		_spec.ClearField(paymentintent.FieldDescription, field.TypeString)
	}
	if value, ok := piuo.mutation.ClientSecret(); ok {
		_spec.SetField(paymentintent.FieldClientSecret, field.TypeString, value)
	}
	if piuo.mutation.ClientSecretCleared() {
		_spec.ClearField(paymentintent.FieldClientSecret, field.TypeString)
	}
	if value, ok := piuo.mutation.Metadata(); ok {
		_spec.SetField(paymentintent.FieldMetadata, field.TypeJSON, value)
	}
	if piuo.mutation.MetadataCleared() {
		_spec.ClearField(paymentintent.FieldMetadata, field.TypeJSON)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentintent.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentintent.CustomerTable,
			Columns: []string{paymentintent.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentintent.CustomerTable,
			Columns: []string{paymentintent.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentIntent{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentintent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
