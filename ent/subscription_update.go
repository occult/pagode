// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/predicate"
	"github.com/occult/pagode/ent/subscription"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetProviderSubscriptionID sets the "provider_subscription_id" field.
func (su *SubscriptionUpdate) SetProviderSubscriptionID(s string) *SubscriptionUpdate {
	su.mutation.SetProviderSubscriptionID(s)
	return su
}

// SetNillableProviderSubscriptionID sets the "provider_subscription_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableProviderSubscriptionID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetProviderSubscriptionID(*s)
	}
	return su
}

// SetProvider sets the "provider" field.
func (su *SubscriptionUpdate) SetProvider(s string) *SubscriptionUpdate {
	su.mutation.SetProvider(s)
	return su
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableProvider(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetProvider(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(s subscription.Status) *SubscriptionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(s *subscription.Status) *SubscriptionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetPriceID sets the "price_id" field.
func (su *SubscriptionUpdate) SetPriceID(s string) *SubscriptionUpdate {
	su.mutation.SetPriceID(s)
	return su
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePriceID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetPriceID(*s)
	}
	return su
}

// SetAmount sets the "amount" field.
func (su *SubscriptionUpdate) SetAmount(i int64) *SubscriptionUpdate {
	su.mutation.ResetAmount()
	su.mutation.SetAmount(i)
	return su
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAmount(i *int64) *SubscriptionUpdate {
	if i != nil {
		su.SetAmount(*i)
	}
	return su
}

// AddAmount adds i to the "amount" field.
func (su *SubscriptionUpdate) AddAmount(i int64) *SubscriptionUpdate {
	su.mutation.AddAmount(i)
	return su
}

// SetCurrency sets the "currency" field.
func (su *SubscriptionUpdate) SetCurrency(s string) *SubscriptionUpdate {
	su.mutation.SetCurrency(s)
	return su
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCurrency(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetCurrency(*s)
	}
	return su
}

// SetInterval sets the "interval" field.
func (su *SubscriptionUpdate) SetInterval(s subscription.Interval) *SubscriptionUpdate {
	su.mutation.SetInterval(s)
	return su
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableInterval(s *subscription.Interval) *SubscriptionUpdate {
	if s != nil {
		su.SetInterval(*s)
	}
	return su
}

// SetIntervalCount sets the "interval_count" field.
func (su *SubscriptionUpdate) SetIntervalCount(i int) *SubscriptionUpdate {
	su.mutation.ResetIntervalCount()
	su.mutation.SetIntervalCount(i)
	return su
}

// SetNillableIntervalCount sets the "interval_count" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableIntervalCount(i *int) *SubscriptionUpdate {
	if i != nil {
		su.SetIntervalCount(*i)
	}
	return su
}

// AddIntervalCount adds i to the "interval_count" field.
func (su *SubscriptionUpdate) AddIntervalCount(i int) *SubscriptionUpdate {
	su.mutation.AddIntervalCount(i)
	return su
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (su *SubscriptionUpdate) SetCurrentPeriodStart(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCurrentPeriodStart(t)
	return su
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCurrentPeriodStart(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCurrentPeriodStart(*t)
	}
	return su
}

// ClearCurrentPeriodStart clears the value of the "current_period_start" field.
func (su *SubscriptionUpdate) ClearCurrentPeriodStart() *SubscriptionUpdate {
	su.mutation.ClearCurrentPeriodStart()
	return su
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (su *SubscriptionUpdate) SetCurrentPeriodEnd(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCurrentPeriodEnd(t)
	return su
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCurrentPeriodEnd(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCurrentPeriodEnd(*t)
	}
	return su
}

// ClearCurrentPeriodEnd clears the value of the "current_period_end" field.
func (su *SubscriptionUpdate) ClearCurrentPeriodEnd() *SubscriptionUpdate {
	su.mutation.ClearCurrentPeriodEnd()
	return su
}

// SetTrialStart sets the "trial_start" field.
func (su *SubscriptionUpdate) SetTrialStart(t time.Time) *SubscriptionUpdate {
	su.mutation.SetTrialStart(t)
	return su
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTrialStart(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetTrialStart(*t)
	}
	return su
}

// ClearTrialStart clears the value of the "trial_start" field.
func (su *SubscriptionUpdate) ClearTrialStart() *SubscriptionUpdate {
	su.mutation.ClearTrialStart()
	return su
}

// SetTrialEnd sets the "trial_end" field.
func (su *SubscriptionUpdate) SetTrialEnd(t time.Time) *SubscriptionUpdate {
	su.mutation.SetTrialEnd(t)
	return su
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetTrialEnd(*t)
	}
	return su
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (su *SubscriptionUpdate) ClearTrialEnd() *SubscriptionUpdate {
	su.mutation.ClearTrialEnd()
	return su
}

// SetCanceledAt sets the "canceled_at" field.
func (su *SubscriptionUpdate) SetCanceledAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCanceledAt(t)
	return su
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCanceledAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCanceledAt(*t)
	}
	return su
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (su *SubscriptionUpdate) ClearCanceledAt() *SubscriptionUpdate {
	su.mutation.ClearCanceledAt()
	return su
}

// SetEndedAt sets the "ended_at" field.
func (su *SubscriptionUpdate) SetEndedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetEndedAt(t)
	return su
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableEndedAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetEndedAt(*t)
	}
	return su
}

// ClearEndedAt clears the value of the "ended_at" field.
func (su *SubscriptionUpdate) ClearEndedAt() *SubscriptionUpdate {
	su.mutation.ClearEndedAt()
	return su
}

// SetMetadata sets the "metadata" field.
func (su *SubscriptionUpdate) SetMetadata(m map[string]interface{}) *SubscriptionUpdate {
	su.mutation.SetMetadata(m)
	return su
}

// ClearMetadata clears the value of the "metadata" field.
func (su *SubscriptionUpdate) ClearMetadata() *SubscriptionUpdate {
	su.mutation.ClearMetadata()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetCustomerID sets the "customer" edge to the PaymentCustomer entity by ID.
func (su *SubscriptionUpdate) SetCustomerID(id int) *SubscriptionUpdate {
	su.mutation.SetCustomerID(id)
	return su
}

// SetCustomer sets the "customer" edge to the PaymentCustomer entity.
func (su *SubscriptionUpdate) SetCustomer(p *PaymentCustomer) *SubscriptionUpdate {
	return su.SetCustomerID(p.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// ClearCustomer clears the "customer" edge to the PaymentCustomer entity.
func (su *SubscriptionUpdate) ClearCustomer() *SubscriptionUpdate {
	su.mutation.ClearCustomer()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if v, ok := su.mutation.ProviderSubscriptionID(); ok {
		if err := subscription.ProviderSubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_subscription_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.provider_subscription_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Provider(); ok {
		if err := subscription.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Subscription.provider": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.PriceID(); ok {
		if err := subscription.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.price_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Amount(); ok {
		if err := subscription.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Subscription.amount": %w`, err)}
		}
	}
	if v, ok := su.mutation.Currency(); ok {
		if err := subscription.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Subscription.currency": %w`, err)}
		}
	}
	if v, ok := su.mutation.Interval(); ok {
		if err := subscription.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "Subscription.interval": %w`, err)}
		}
	}
	if v, ok := su.mutation.IntervalCount(); ok {
		if err := subscription.IntervalCountValidator(v); err != nil {
			return &ValidationError{Name: "interval_count", err: fmt.Errorf(`ent: validator failed for field "Subscription.interval_count": %w`, err)}
		}
	}
	if su.mutation.CustomerCleared() && len(su.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.customer"`)
	}
	return nil
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ProviderSubscriptionID(); ok {
		_spec.SetField(subscription.FieldProviderSubscriptionID, field.TypeString, value)
	}
	if value, ok := su.mutation.Provider(); ok {
		_spec.SetField(subscription.FieldProvider, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.PriceID(); ok {
		_spec.SetField(subscription.FieldPriceID, field.TypeString, value)
	}
	if value, ok := su.mutation.Amount(); ok {
		_spec.SetField(subscription.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedAmount(); ok {
		_spec.AddField(subscription.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Currency(); ok {
		_spec.SetField(subscription.FieldCurrency, field.TypeString, value)
	}
	if value, ok := su.mutation.Interval(); ok {
		_spec.SetField(subscription.FieldInterval, field.TypeEnum, value)
	}
	if value, ok := su.mutation.IntervalCount(); ok {
		_spec.SetField(subscription.FieldIntervalCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedIntervalCount(); ok {
		_spec.AddField(subscription.FieldIntervalCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if su.mutation.CurrentPeriodStartCleared() {
		_spec.ClearField(subscription.FieldCurrentPeriodStart, field.TypeTime)
	}
	if value, ok := su.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if su.mutation.CurrentPeriodEndCleared() {
		_spec.ClearField(subscription.FieldCurrentPeriodEnd, field.TypeTime)
	}
	if value, ok := su.mutation.TrialStart(); ok {
		_spec.SetField(subscription.FieldTrialStart, field.TypeTime, value)
	}
	if su.mutation.TrialStartCleared() {
		_spec.ClearField(subscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := su.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if su.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := su.mutation.CanceledAt(); ok {
		_spec.SetField(subscription.FieldCanceledAt, field.TypeTime, value)
	}
	if su.mutation.CanceledAtCleared() {
		_spec.ClearField(subscription.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := su.mutation.EndedAt(); ok {
		_spec.SetField(subscription.FieldEndedAt, field.TypeTime, value)
	}
	if su.mutation.EndedAtCleared() {
		_spec.ClearField(subscription.FieldEndedAt, field.TypeTime)
	}
	if value, ok := su.mutation.Metadata(); ok {
		_spec.SetField(subscription.FieldMetadata, field.TypeJSON, value)
	}
	if su.mutation.MetadataCleared() {
		_spec.ClearField(subscription.FieldMetadata, field.TypeJSON)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.CustomerTable,
			Columns: []string{subscription.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.CustomerTable,
			Columns: []string{subscription.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetProviderSubscriptionID sets the "provider_subscription_id" field.
func (suo *SubscriptionUpdateOne) SetProviderSubscriptionID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetProviderSubscriptionID(s)
	return suo
}

// SetNillableProviderSubscriptionID sets the "provider_subscription_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableProviderSubscriptionID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetProviderSubscriptionID(*s)
	}
	return suo
}

// SetProvider sets the "provider" field.
func (suo *SubscriptionUpdateOne) SetProvider(s string) *SubscriptionUpdateOne {
	suo.mutation.SetProvider(s)
	return suo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableProvider(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetProvider(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(s subscription.Status) *SubscriptionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(s *subscription.Status) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetPriceID sets the "price_id" field.
func (suo *SubscriptionUpdateOne) SetPriceID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetPriceID(s)
	return suo
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePriceID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetPriceID(*s)
	}
	return suo
}

// SetAmount sets the "amount" field.
func (suo *SubscriptionUpdateOne) SetAmount(i int64) *SubscriptionUpdateOne {
	suo.mutation.ResetAmount()
	suo.mutation.SetAmount(i)
	return suo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAmount(i *int64) *SubscriptionUpdateOne {
	if i != nil {
		suo.SetAmount(*i)
	}
	return suo
}

// AddAmount adds i to the "amount" field.
func (suo *SubscriptionUpdateOne) AddAmount(i int64) *SubscriptionUpdateOne {
	suo.mutation.AddAmount(i)
	return suo
}

// SetCurrency sets the "currency" field.
func (suo *SubscriptionUpdateOne) SetCurrency(s string) *SubscriptionUpdateOne {
	suo.mutation.SetCurrency(s)
	return suo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCurrency(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetCurrency(*s)
	}
	return suo
}

// SetInterval sets the "interval" field.
func (suo *SubscriptionUpdateOne) SetInterval(s subscription.Interval) *SubscriptionUpdateOne {
	suo.mutation.SetInterval(s)
	return suo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableInterval(s *subscription.Interval) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetInterval(*s)
	}
	return suo
}

// SetIntervalCount sets the "interval_count" field.
func (suo *SubscriptionUpdateOne) SetIntervalCount(i int) *SubscriptionUpdateOne {
	suo.mutation.ResetIntervalCount()
	suo.mutation.SetIntervalCount(i)
	return suo
}

// SetNillableIntervalCount sets the "interval_count" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableIntervalCount(i *int) *SubscriptionUpdateOne {
	if i != nil {
		suo.SetIntervalCount(*i)
	}
	return suo
}

// AddIntervalCount adds i to the "interval_count" field.
func (suo *SubscriptionUpdateOne) AddIntervalCount(i int) *SubscriptionUpdateOne {
	suo.mutation.AddIntervalCount(i)
	return suo
}

// SetCurrentPeriodStart sets the "current_period_start" field.
func (suo *SubscriptionUpdateOne) SetCurrentPeriodStart(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCurrentPeriodStart(t)
	return suo
}

// SetNillableCurrentPeriodStart sets the "current_period_start" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCurrentPeriodStart(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCurrentPeriodStart(*t)
	}
	return suo
}

// ClearCurrentPeriodStart clears the value of the "current_period_start" field.
func (suo *SubscriptionUpdateOne) ClearCurrentPeriodStart() *SubscriptionUpdateOne {
	suo.mutation.ClearCurrentPeriodStart()
	return suo
}

// SetCurrentPeriodEnd sets the "current_period_end" field.
func (suo *SubscriptionUpdateOne) SetCurrentPeriodEnd(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCurrentPeriodEnd(t)
	return suo
}

// SetNillableCurrentPeriodEnd sets the "current_period_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCurrentPeriodEnd(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCurrentPeriodEnd(*t)
	}
	return suo
}

// ClearCurrentPeriodEnd clears the value of the "current_period_end" field.
func (suo *SubscriptionUpdateOne) ClearCurrentPeriodEnd() *SubscriptionUpdateOne {
	suo.mutation.ClearCurrentPeriodEnd()
	return suo
}

// SetTrialStart sets the "trial_start" field.
func (suo *SubscriptionUpdateOne) SetTrialStart(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetTrialStart(t)
	return suo
}

// SetNillableTrialStart sets the "trial_start" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTrialStart(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetTrialStart(*t)
	}
	return suo
}

// ClearTrialStart clears the value of the "trial_start" field.
func (suo *SubscriptionUpdateOne) ClearTrialStart() *SubscriptionUpdateOne {
	suo.mutation.ClearTrialStart()
	return suo
}

// SetTrialEnd sets the "trial_end" field.
func (suo *SubscriptionUpdateOne) SetTrialEnd(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetTrialEnd(t)
	return suo
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetTrialEnd(*t)
	}
	return suo
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (suo *SubscriptionUpdateOne) ClearTrialEnd() *SubscriptionUpdateOne {
	suo.mutation.ClearTrialEnd()
	return suo
}

// SetCanceledAt sets the "canceled_at" field.
func (suo *SubscriptionUpdateOne) SetCanceledAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCanceledAt(t)
	return suo
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCanceledAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCanceledAt(*t)
	}
	return suo
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (suo *SubscriptionUpdateOne) ClearCanceledAt() *SubscriptionUpdateOne {
	suo.mutation.ClearCanceledAt()
	return suo
}

// SetEndedAt sets the "ended_at" field.
func (suo *SubscriptionUpdateOne) SetEndedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetEndedAt(t)
	return suo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableEndedAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetEndedAt(*t)
	}
	return suo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (suo *SubscriptionUpdateOne) ClearEndedAt() *SubscriptionUpdateOne {
	suo.mutation.ClearEndedAt()
	return suo
}

// SetMetadata sets the "metadata" field.
func (suo *SubscriptionUpdateOne) SetMetadata(m map[string]interface{}) *SubscriptionUpdateOne {
	suo.mutation.SetMetadata(m)
	return suo
}

// ClearMetadata clears the value of the "metadata" field.
func (suo *SubscriptionUpdateOne) ClearMetadata() *SubscriptionUpdateOne {
	suo.mutation.ClearMetadata()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetCustomerID sets the "customer" edge to the PaymentCustomer entity by ID.
func (suo *SubscriptionUpdateOne) SetCustomerID(id int) *SubscriptionUpdateOne {
	suo.mutation.SetCustomerID(id)
	return suo
}

// SetCustomer sets the "customer" edge to the PaymentCustomer entity.
func (suo *SubscriptionUpdateOne) SetCustomer(p *PaymentCustomer) *SubscriptionUpdateOne {
	return suo.SetCustomerID(p.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// ClearCustomer clears the "customer" edge to the PaymentCustomer entity.
func (suo *SubscriptionUpdateOne) ClearCustomer() *SubscriptionUpdateOne {
	suo.mutation.ClearCustomer()
	return suo
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if v, ok := suo.mutation.ProviderSubscriptionID(); ok {
		if err := subscription.ProviderSubscriptionIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_subscription_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.provider_subscription_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Provider(); ok {
		if err := subscription.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Subscription.provider": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PriceID(); ok {
		if err := subscription.PriceIDValidator(v); err != nil {
			return &ValidationError{Name: "price_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.price_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Amount(); ok {
		if err := subscription.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Subscription.amount": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Currency(); ok {
		if err := subscription.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Subscription.currency": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Interval(); ok {
		if err := subscription.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "Subscription.interval": %w`, err)}
		}
	}
	if v, ok := suo.mutation.IntervalCount(); ok {
		if err := subscription.IntervalCountValidator(v); err != nil {
			return &ValidationError{Name: "interval_count", err: fmt.Errorf(`ent: validator failed for field "Subscription.interval_count": %w`, err)}
		}
	}
	if suo.mutation.CustomerCleared() && len(suo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.customer"`)
	}
	return nil
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ProviderSubscriptionID(); ok {
		_spec.SetField(subscription.FieldProviderSubscriptionID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Provider(); ok {
		_spec.SetField(subscription.FieldProvider, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.PriceID(); ok {
		_spec.SetField(subscription.FieldPriceID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Amount(); ok {
		_spec.SetField(subscription.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedAmount(); ok {
		_spec.AddField(subscription.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Currency(); ok {
		_spec.SetField(subscription.FieldCurrency, field.TypeString, value)
	}
	if value, ok := suo.mutation.Interval(); ok {
		_spec.SetField(subscription.FieldInterval, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.IntervalCount(); ok {
		_spec.SetField(subscription.FieldIntervalCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedIntervalCount(); ok {
		_spec.AddField(subscription.FieldIntervalCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CurrentPeriodStart(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodStart, field.TypeTime, value)
	}
	if suo.mutation.CurrentPeriodStartCleared() {
		_spec.ClearField(subscription.FieldCurrentPeriodStart, field.TypeTime)
	}
	if value, ok := suo.mutation.CurrentPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCurrentPeriodEnd, field.TypeTime, value)
	}
	if suo.mutation.CurrentPeriodEndCleared() {
		_spec.ClearField(subscription.FieldCurrentPeriodEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.TrialStart(); ok {
		_spec.SetField(subscription.FieldTrialStart, field.TypeTime, value)
	}
	if suo.mutation.TrialStartCleared() {
		_spec.ClearField(subscription.FieldTrialStart, field.TypeTime)
	}
	if value, ok := suo.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if suo.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.CanceledAt(); ok {
		_spec.SetField(subscription.FieldCanceledAt, field.TypeTime, value)
	}
	if suo.mutation.CanceledAtCleared() {
		_spec.ClearField(subscription.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := suo.mutation.EndedAt(); ok {
		_spec.SetField(subscription.FieldEndedAt, field.TypeTime, value)
	}
	if suo.mutation.EndedAtCleared() {
		_spec.ClearField(subscription.FieldEndedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Metadata(); ok {
		_spec.SetField(subscription.FieldMetadata, field.TypeJSON, value)
	}
	if suo.mutation.MetadataCleared() {
		_spec.ClearField(subscription.FieldMetadata, field.TypeJSON)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.CustomerTable,
			Columns: []string{subscription.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.CustomerTable,
			Columns: []string{subscription.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
