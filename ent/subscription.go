// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/subscription"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// External payment provider subscription ID
	ProviderSubscriptionID string `json:"provider_subscription_id,omitempty"`
	// Payment provider name
	Provider string `json:"provider,omitempty"`
	// Subscription status from provider
	Status subscription.Status `json:"status,omitempty"`
	// Price/plan ID from payment provider
	PriceID string `json:"price_id,omitempty"`
	// Subscription amount in smallest currency unit
	Amount int64 `json:"amount,omitempty"`
	// Three-letter ISO currency code
	Currency string `json:"currency,omitempty"`
	// Billing interval
	Interval subscription.Interval `json:"interval,omitempty"`
	// Number of intervals between billings
	IntervalCount int `json:"interval_count,omitempty"`
	// Start of current billing period
	CurrentPeriodStart time.Time `json:"current_period_start,omitempty"`
	// End of current billing period
	CurrentPeriodEnd time.Time `json:"current_period_end,omitempty"`
	// Trial period start
	TrialStart time.Time `json:"trial_start,omitempty"`
	// Trial period end
	TrialEnd time.Time `json:"trial_end,omitempty"`
	// When subscription was canceled
	CanceledAt time.Time `json:"canceled_at,omitempty"`
	// When subscription ended
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Additional subscription data
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionQuery when eager-loading is set.
	Edges                          SubscriptionEdges `json:"edges"`
	payment_customer_subscriptions *int
	selectValues                   sql.SelectValues
}

// SubscriptionEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEdges struct {
	// Payment customer who owns this subscription
	Customer *PaymentCustomer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) CustomerOrErr() (*PaymentCustomer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentcustomer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldMetadata:
			values[i] = new([]byte)
		case subscription.FieldID, subscription.FieldAmount, subscription.FieldIntervalCount:
			values[i] = new(sql.NullInt64)
		case subscription.FieldProviderSubscriptionID, subscription.FieldProvider, subscription.FieldStatus, subscription.FieldPriceID, subscription.FieldCurrency, subscription.FieldInterval:
			values[i] = new(sql.NullString)
		case subscription.FieldCurrentPeriodStart, subscription.FieldCurrentPeriodEnd, subscription.FieldTrialStart, subscription.FieldTrialEnd, subscription.FieldCanceledAt, subscription.FieldEndedAt, subscription.FieldCreatedAt, subscription.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case subscription.ForeignKeys[0]: // payment_customer_subscriptions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case subscription.FieldProviderSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_subscription_id", values[i])
			} else if value.Valid {
				s.ProviderSubscriptionID = value.String
			}
		case subscription.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				s.Provider = value.String
			}
		case subscription.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = subscription.Status(value.String)
			}
		case subscription.FieldPriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_id", values[i])
			} else if value.Valid {
				s.PriceID = value.String
			}
		case subscription.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				s.Amount = value.Int64
			}
		case subscription.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				s.Currency = value.String
			}
		case subscription.FieldInterval:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				s.Interval = subscription.Interval(value.String)
			}
		case subscription.FieldIntervalCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_count", values[i])
			} else if value.Valid {
				s.IntervalCount = int(value.Int64)
			}
		case subscription.FieldCurrentPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field current_period_start", values[i])
			} else if value.Valid {
				s.CurrentPeriodStart = value.Time
			}
		case subscription.FieldCurrentPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field current_period_end", values[i])
			} else if value.Valid {
				s.CurrentPeriodEnd = value.Time
			}
		case subscription.FieldTrialStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_start", values[i])
			} else if value.Valid {
				s.TrialStart = value.Time
			}
		case subscription.FieldTrialEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field trial_end", values[i])
			} else if value.Valid {
				s.TrialEnd = value.Time
			}
		case subscription.FieldCanceledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field canceled_at", values[i])
			} else if value.Valid {
				s.CanceledAt = value.Time
			}
		case subscription.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = value.Time
			}
		case subscription.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case subscription.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subscription.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subscription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_customer_subscriptions", value)
			} else if value.Valid {
				s.payment_customer_subscriptions = new(int)
				*s.payment_customer_subscriptions = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscription.
// This includes values selected through modifiers, order, etc.
func (s *Subscription) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the Subscription entity.
func (s *Subscription) QueryCustomer() *PaymentCustomerQuery {
	return NewSubscriptionClient(s.config).QueryCustomer(s)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return NewSubscriptionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscription is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("provider_subscription_id=")
	builder.WriteString(s.ProviderSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(s.Provider)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("price_id=")
	builder.WriteString(s.PriceID)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", s.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(s.Currency)
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(fmt.Sprintf("%v", s.Interval))
	builder.WriteString(", ")
	builder.WriteString("interval_count=")
	builder.WriteString(fmt.Sprintf("%v", s.IntervalCount))
	builder.WriteString(", ")
	builder.WriteString("current_period_start=")
	builder.WriteString(s.CurrentPeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("current_period_end=")
	builder.WriteString(s.CurrentPeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trial_start=")
	builder.WriteString(s.TrialStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trial_end=")
	builder.WriteString(s.TrialEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("canceled_at=")
	builder.WriteString(s.CanceledAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ended_at=")
	builder.WriteString(s.EndedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", s.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription
