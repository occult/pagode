// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentmethod"
)

// PaymentMethod is the model entity for the PaymentMethod schema.
type PaymentMethod struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// External payment provider payment method ID
	ProviderPaymentMethodID string `json:"provider_payment_method_id,omitempty"`
	// Payment provider name
	Provider string `json:"provider,omitempty"`
	// Payment method type
	Type paymentmethod.Type `json:"type,omitempty"`
	// Last four digits of card/account
	LastFour string `json:"last_four,omitempty"`
	// Card brand (visa, mastercard, etc.)
	Brand string `json:"brand,omitempty"`
	// Card expiration month
	ExpMonth int `json:"exp_month,omitempty"`
	// Card expiration year
	ExpYear int `json:"exp_year,omitempty"`
	// Whether this is the default payment method
	IsDefault bool `json:"is_default,omitempty"`
	// Additional payment method data
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentMethodQuery when eager-loading is set.
	Edges                            PaymentMethodEdges `json:"edges"`
	payment_customer_payment_methods *int
	selectValues                     sql.SelectValues
}

// PaymentMethodEdges holds the relations/edges for other nodes in the graph.
type PaymentMethodEdges struct {
	// Payment customer who owns this payment method
	Customer *PaymentCustomer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentMethodEdges) CustomerOrErr() (*PaymentCustomer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentcustomer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentMethod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldMetadata:
			values[i] = new([]byte)
		case paymentmethod.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case paymentmethod.FieldID, paymentmethod.FieldExpMonth, paymentmethod.FieldExpYear:
			values[i] = new(sql.NullInt64)
		case paymentmethod.FieldProviderPaymentMethodID, paymentmethod.FieldProvider, paymentmethod.FieldType, paymentmethod.FieldLastFour, paymentmethod.FieldBrand:
			values[i] = new(sql.NullString)
		case paymentmethod.FieldCreatedAt, paymentmethod.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case paymentmethod.ForeignKeys[0]: // payment_customer_payment_methods
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentMethod fields.
func (pm *PaymentMethod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentmethod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case paymentmethod.FieldProviderPaymentMethodID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_payment_method_id", values[i])
			} else if value.Valid {
				pm.ProviderPaymentMethodID = value.String
			}
		case paymentmethod.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pm.Provider = value.String
			}
		case paymentmethod.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pm.Type = paymentmethod.Type(value.String)
			}
		case paymentmethod.FieldLastFour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_four", values[i])
			} else if value.Valid {
				pm.LastFour = value.String
			}
		case paymentmethod.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				pm.Brand = value.String
			}
		case paymentmethod.FieldExpMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp_month", values[i])
			} else if value.Valid {
				pm.ExpMonth = int(value.Int64)
			}
		case paymentmethod.FieldExpYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp_year", values[i])
			} else if value.Valid {
				pm.ExpYear = int(value.Int64)
			}
		case paymentmethod.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				pm.IsDefault = value.Bool
			}
		case paymentmethod.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pm.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case paymentmethod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case paymentmethod.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case paymentmethod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_customer_payment_methods", value)
			} else if value.Valid {
				pm.payment_customer_payment_methods = new(int)
				*pm.payment_customer_payment_methods = int(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentMethod.
// This includes values selected through modifiers, order, etc.
func (pm *PaymentMethod) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the PaymentMethod entity.
func (pm *PaymentMethod) QueryCustomer() *PaymentCustomerQuery {
	return NewPaymentMethodClient(pm.config).QueryCustomer(pm)
}

// Update returns a builder for updating this PaymentMethod.
// Note that you need to call PaymentMethod.Unwrap() before calling this method if this PaymentMethod
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PaymentMethod) Update() *PaymentMethodUpdateOne {
	return NewPaymentMethodClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PaymentMethod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PaymentMethod) Unwrap() *PaymentMethod {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentMethod is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PaymentMethod) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentMethod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("provider_payment_method_id=")
	builder.WriteString(pm.ProviderPaymentMethodID)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(pm.Provider)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pm.Type))
	builder.WriteString(", ")
	builder.WriteString("last_four=")
	builder.WriteString(pm.LastFour)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(pm.Brand)
	builder.WriteString(", ")
	builder.WriteString("exp_month=")
	builder.WriteString(fmt.Sprintf("%v", pm.ExpMonth))
	builder.WriteString(", ")
	builder.WriteString("exp_year=")
	builder.WriteString(fmt.Sprintf("%v", pm.ExpYear))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", pm.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pm.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentMethods is a parsable slice of PaymentMethod.
type PaymentMethods []*PaymentMethod
