// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentintent"
	"github.com/occult/pagode/ent/paymentmethod"
	"github.com/occult/pagode/ent/subscription"
	"github.com/occult/pagode/ent/user"
)

// PaymentCustomerCreate is the builder for creating a PaymentCustomer entity.
type PaymentCustomerCreate struct {
	config
	mutation *PaymentCustomerMutation
	hooks    []Hook
}

// SetProviderCustomerID sets the "provider_customer_id" field.
func (pcc *PaymentCustomerCreate) SetProviderCustomerID(s string) *PaymentCustomerCreate {
	pcc.mutation.SetProviderCustomerID(s)
	return pcc
}

// SetProvider sets the "provider" field.
func (pcc *PaymentCustomerCreate) SetProvider(s string) *PaymentCustomerCreate {
	pcc.mutation.SetProvider(s)
	return pcc
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pcc *PaymentCustomerCreate) SetNillableProvider(s *string) *PaymentCustomerCreate {
	if s != nil {
		pcc.SetProvider(*s)
	}
	return pcc
}

// SetEmail sets the "email" field.
func (pcc *PaymentCustomerCreate) SetEmail(s string) *PaymentCustomerCreate {
	pcc.mutation.SetEmail(s)
	return pcc
}

// SetName sets the "name" field.
func (pcc *PaymentCustomerCreate) SetName(s string) *PaymentCustomerCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcc *PaymentCustomerCreate) SetNillableName(s *string) *PaymentCustomerCreate {
	if s != nil {
		pcc.SetName(*s)
	}
	return pcc
}

// SetMetadata sets the "metadata" field.
func (pcc *PaymentCustomerCreate) SetMetadata(m map[string]interface{}) *PaymentCustomerCreate {
	pcc.mutation.SetMetadata(m)
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PaymentCustomerCreate) SetCreatedAt(t time.Time) *PaymentCustomerCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PaymentCustomerCreate) SetNillableCreatedAt(t *time.Time) *PaymentCustomerCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PaymentCustomerCreate) SetUpdatedAt(t time.Time) *PaymentCustomerCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PaymentCustomerCreate) SetNillableUpdatedAt(t *time.Time) *PaymentCustomerCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pcc *PaymentCustomerCreate) SetUserID(id int) *PaymentCustomerCreate {
	pcc.mutation.SetUserID(id)
	return pcc
}

// SetUser sets the "user" edge to the User entity.
func (pcc *PaymentCustomerCreate) SetUser(u *User) *PaymentCustomerCreate {
	return pcc.SetUserID(u.ID)
}

// AddPaymentIntentIDs adds the "payment_intents" edge to the PaymentIntent entity by IDs.
func (pcc *PaymentCustomerCreate) AddPaymentIntentIDs(ids ...int) *PaymentCustomerCreate {
	pcc.mutation.AddPaymentIntentIDs(ids...)
	return pcc
}

// AddPaymentIntents adds the "payment_intents" edges to the PaymentIntent entity.
func (pcc *PaymentCustomerCreate) AddPaymentIntents(p ...*PaymentIntent) *PaymentCustomerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPaymentIntentIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (pcc *PaymentCustomerCreate) AddSubscriptionIDs(ids ...int) *PaymentCustomerCreate {
	pcc.mutation.AddSubscriptionIDs(ids...)
	return pcc
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (pcc *PaymentCustomerCreate) AddSubscriptions(s ...*Subscription) *PaymentCustomerCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pcc.AddSubscriptionIDs(ids...)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (pcc *PaymentCustomerCreate) AddPaymentMethodIDs(ids ...int) *PaymentCustomerCreate {
	pcc.mutation.AddPaymentMethodIDs(ids...)
	return pcc
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (pcc *PaymentCustomerCreate) AddPaymentMethods(p ...*PaymentMethod) *PaymentCustomerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPaymentMethodIDs(ids...)
}

// Mutation returns the PaymentCustomerMutation object of the builder.
func (pcc *PaymentCustomerCreate) Mutation() *PaymentCustomerMutation {
	return pcc.mutation
}

// Save creates the PaymentCustomer in the database.
func (pcc *PaymentCustomerCreate) Save(ctx context.Context) (*PaymentCustomer, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PaymentCustomerCreate) SaveX(ctx context.Context) *PaymentCustomer {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PaymentCustomerCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PaymentCustomerCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PaymentCustomerCreate) defaults() {
	if _, ok := pcc.mutation.Provider(); !ok {
		v := paymentcustomer.DefaultProvider
		pcc.mutation.SetProvider(v)
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := paymentcustomer.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := paymentcustomer.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PaymentCustomerCreate) check() error {
	if _, ok := pcc.mutation.ProviderCustomerID(); !ok {
		return &ValidationError{Name: "provider_customer_id", err: errors.New(`ent: missing required field "PaymentCustomer.provider_customer_id"`)}
	}
	if v, ok := pcc.mutation.ProviderCustomerID(); ok {
		if err := paymentcustomer.ProviderCustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_customer_id", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider_customer_id": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "PaymentCustomer.provider"`)}
	}
	if v, ok := pcc.mutation.Provider(); ok {
		if err := paymentcustomer.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "PaymentCustomer.email"`)}
	}
	if v, ok := pcc.mutation.Email(); ok {
		if err := paymentcustomer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.email": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentCustomer.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentCustomer.updated_at"`)}
	}
	if len(pcc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PaymentCustomer.user"`)}
	}
	return nil
}

func (pcc *PaymentCustomerCreate) sqlSave(ctx context.Context) (*PaymentCustomer, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PaymentCustomerCreate) createSpec() (*PaymentCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentCustomer{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(paymentcustomer.Table, sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt))
	)
	if value, ok := pcc.mutation.ProviderCustomerID(); ok {
		_spec.SetField(paymentcustomer.FieldProviderCustomerID, field.TypeString, value)
		_node.ProviderCustomerID = value
	}
	if value, ok := pcc.mutation.Provider(); ok {
		_spec.SetField(paymentcustomer.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := pcc.mutation.Email(); ok {
		_spec.SetField(paymentcustomer.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(paymentcustomer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.Metadata(); ok {
		_spec.SetField(paymentcustomer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentcustomer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentcustomer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentcustomer.UserTable,
			Columns: []string{paymentcustomer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PaymentIntentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentCustomerCreateBulk is the builder for creating many PaymentCustomer entities in bulk.
type PaymentCustomerCreateBulk struct {
	config
	err      error
	builders []*PaymentCustomerCreate
}

// Save creates the PaymentCustomer entities in the database.
func (pccb *PaymentCustomerCreateBulk) Save(ctx context.Context) ([]*PaymentCustomer, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PaymentCustomer, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PaymentCustomerCreateBulk) SaveX(ctx context.Context) []*PaymentCustomer {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PaymentCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PaymentCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
