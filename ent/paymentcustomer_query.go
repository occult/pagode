// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentintent"
	"github.com/occult/pagode/ent/paymentmethod"
	"github.com/occult/pagode/ent/predicate"
	"github.com/occult/pagode/ent/subscription"
	"github.com/occult/pagode/ent/user"
)

// PaymentCustomerQuery is the builder for querying PaymentCustomer entities.
type PaymentCustomerQuery struct {
	config
	ctx                *QueryContext
	order              []paymentcustomer.OrderOption
	inters             []Interceptor
	predicates         []predicate.PaymentCustomer
	withUser           *UserQuery
	withPaymentIntents *PaymentIntentQuery
	withSubscriptions  *SubscriptionQuery
	withPaymentMethods *PaymentMethodQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentCustomerQuery builder.
func (pcq *PaymentCustomerQuery) Where(ps ...predicate.PaymentCustomer) *PaymentCustomerQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit the number of records to be returned by this query.
func (pcq *PaymentCustomerQuery) Limit(limit int) *PaymentCustomerQuery {
	pcq.ctx.Limit = &limit
	return pcq
}

// Offset to start from.
func (pcq *PaymentCustomerQuery) Offset(offset int) *PaymentCustomerQuery {
	pcq.ctx.Offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *PaymentCustomerQuery) Unique(unique bool) *PaymentCustomerQuery {
	pcq.ctx.Unique = &unique
	return pcq
}

// Order specifies how the records should be ordered.
func (pcq *PaymentCustomerQuery) Order(o ...paymentcustomer.OrderOption) *PaymentCustomerQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// QueryUser chains the current query on the "user" edge.
func (pcq *PaymentCustomerQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentcustomer.Table, paymentcustomer.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentcustomer.UserTable, paymentcustomer.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaymentIntents chains the current query on the "payment_intents" edge.
func (pcq *PaymentCustomerQuery) QueryPaymentIntents() *PaymentIntentQuery {
	query := (&PaymentIntentClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentcustomer.Table, paymentcustomer.FieldID, selector),
			sqlgraph.To(paymentintent.Table, paymentintent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentcustomer.PaymentIntentsTable, paymentcustomer.PaymentIntentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptions chains the current query on the "subscriptions" edge.
func (pcq *PaymentCustomerQuery) QuerySubscriptions() *SubscriptionQuery {
	query := (&SubscriptionClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentcustomer.Table, paymentcustomer.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentcustomer.SubscriptionsTable, paymentcustomer.SubscriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaymentMethods chains the current query on the "payment_methods" edge.
func (pcq *PaymentCustomerQuery) QueryPaymentMethods() *PaymentMethodQuery {
	query := (&PaymentMethodClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentcustomer.Table, paymentcustomer.FieldID, selector),
			sqlgraph.To(paymentmethod.Table, paymentmethod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentcustomer.PaymentMethodsTable, paymentcustomer.PaymentMethodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentCustomer entity from the query.
// Returns a *NotFoundError when no PaymentCustomer was found.
func (pcq *PaymentCustomerQuery) First(ctx context.Context) (*PaymentCustomer, error) {
	nodes, err := pcq.Limit(1).All(setContextOp(ctx, pcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentcustomer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) FirstX(ctx context.Context) *PaymentCustomer {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentCustomer ID from the query.
// Returns a *NotFoundError when no PaymentCustomer ID was found.
func (pcq *PaymentCustomerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(1).IDs(setContextOp(ctx, pcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentcustomer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) FirstIDX(ctx context.Context) int {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentCustomer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentCustomer entity is found.
// Returns a *NotFoundError when no PaymentCustomer entities are found.
func (pcq *PaymentCustomerQuery) Only(ctx context.Context) (*PaymentCustomer, error) {
	nodes, err := pcq.Limit(2).All(setContextOp(ctx, pcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentcustomer.Label}
	default:
		return nil, &NotSingularError{paymentcustomer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) OnlyX(ctx context.Context) *PaymentCustomer {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentCustomer ID in the query.
// Returns a *NotSingularError when more than one PaymentCustomer ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *PaymentCustomerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(2).IDs(setContextOp(ctx, pcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentcustomer.Label}
	default:
		err = &NotSingularError{paymentcustomer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) OnlyIDX(ctx context.Context) int {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentCustomers.
func (pcq *PaymentCustomerQuery) All(ctx context.Context) ([]*PaymentCustomer, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryAll)
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentCustomer, *PaymentCustomerQuery]()
	return withInterceptors[[]*PaymentCustomer](ctx, pcq, qr, pcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) AllX(ctx context.Context) []*PaymentCustomer {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentCustomer IDs.
func (pcq *PaymentCustomerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pcq.ctx.Unique == nil && pcq.path != nil {
		pcq.Unique(true)
	}
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryIDs)
	if err = pcq.Select(paymentcustomer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) IDsX(ctx context.Context) []int {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *PaymentCustomerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryCount)
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcq, querierCount[*PaymentCustomerQuery](), pcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *PaymentCustomerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryExist)
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *PaymentCustomerQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentCustomerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *PaymentCustomerQuery) Clone() *PaymentCustomerQuery {
	if pcq == nil {
		return nil
	}
	return &PaymentCustomerQuery{
		config:             pcq.config,
		ctx:                pcq.ctx.Clone(),
		order:              append([]paymentcustomer.OrderOption{}, pcq.order...),
		inters:             append([]Interceptor{}, pcq.inters...),
		predicates:         append([]predicate.PaymentCustomer{}, pcq.predicates...),
		withUser:           pcq.withUser.Clone(),
		withPaymentIntents: pcq.withPaymentIntents.Clone(),
		withSubscriptions:  pcq.withSubscriptions.Clone(),
		withPaymentMethods: pcq.withPaymentMethods.Clone(),
		// clone intermediate query.
		sql:  pcq.sql.Clone(),
		path: pcq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PaymentCustomerQuery) WithUser(opts ...func(*UserQuery)) *PaymentCustomerQuery {
	query := (&UserClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withUser = query
	return pcq
}

// WithPaymentIntents tells the query-builder to eager-load the nodes that are connected to
// the "payment_intents" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PaymentCustomerQuery) WithPaymentIntents(opts ...func(*PaymentIntentQuery)) *PaymentCustomerQuery {
	query := (&PaymentIntentClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withPaymentIntents = query
	return pcq
}

// WithSubscriptions tells the query-builder to eager-load the nodes that are connected to
// the "subscriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PaymentCustomerQuery) WithSubscriptions(opts ...func(*SubscriptionQuery)) *PaymentCustomerQuery {
	query := (&SubscriptionClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withSubscriptions = query
	return pcq
}

// WithPaymentMethods tells the query-builder to eager-load the nodes that are connected to
// the "payment_methods" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PaymentCustomerQuery) WithPaymentMethods(opts ...func(*PaymentMethodQuery)) *PaymentCustomerQuery {
	query := (&PaymentMethodClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withPaymentMethods = query
	return pcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProviderCustomerID string `json:"provider_customer_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentCustomer.Query().
//		GroupBy(paymentcustomer.FieldProviderCustomerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcq *PaymentCustomerQuery) GroupBy(field string, fields ...string) *PaymentCustomerGroupBy {
	pcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentCustomerGroupBy{build: pcq}
	grbuild.flds = &pcq.ctx.Fields
	grbuild.label = paymentcustomer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProviderCustomerID string `json:"provider_customer_id,omitempty"`
//	}
//
//	client.PaymentCustomer.Query().
//		Select(paymentcustomer.FieldProviderCustomerID).
//		Scan(ctx, &v)
func (pcq *PaymentCustomerQuery) Select(fields ...string) *PaymentCustomerSelect {
	pcq.ctx.Fields = append(pcq.ctx.Fields, fields...)
	sbuild := &PaymentCustomerSelect{PaymentCustomerQuery: pcq}
	sbuild.label = paymentcustomer.Label
	sbuild.flds, sbuild.scan = &pcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentCustomerSelect configured with the given aggregations.
func (pcq *PaymentCustomerQuery) Aggregate(fns ...AggregateFunc) *PaymentCustomerSelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *PaymentCustomerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcq.ctx.Fields {
		if !paymentcustomer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	return nil
}

func (pcq *PaymentCustomerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentCustomer, error) {
	var (
		nodes       = []*PaymentCustomer{}
		_spec       = pcq.querySpec()
		loadedTypes = [4]bool{
			pcq.withUser != nil,
			pcq.withPaymentIntents != nil,
			pcq.withSubscriptions != nil,
			pcq.withPaymentMethods != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentCustomer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentCustomer{config: pcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcq.withUser; query != nil {
		if err := pcq.loadUser(ctx, query, nodes, nil,
			func(n *PaymentCustomer, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withPaymentIntents; query != nil {
		if err := pcq.loadPaymentIntents(ctx, query, nodes,
			func(n *PaymentCustomer) { n.Edges.PaymentIntents = []*PaymentIntent{} },
			func(n *PaymentCustomer, e *PaymentIntent) { n.Edges.PaymentIntents = append(n.Edges.PaymentIntents, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withSubscriptions; query != nil {
		if err := pcq.loadSubscriptions(ctx, query, nodes,
			func(n *PaymentCustomer) { n.Edges.Subscriptions = []*Subscription{} },
			func(n *PaymentCustomer, e *Subscription) { n.Edges.Subscriptions = append(n.Edges.Subscriptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withPaymentMethods; query != nil {
		if err := pcq.loadPaymentMethods(ctx, query, nodes,
			func(n *PaymentCustomer) { n.Edges.PaymentMethods = []*PaymentMethod{} },
			func(n *PaymentCustomer, e *PaymentMethod) { n.Edges.PaymentMethods = append(n.Edges.PaymentMethods, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcq *PaymentCustomerQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*PaymentCustomer, init func(*PaymentCustomer), assign func(*PaymentCustomer, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PaymentCustomer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(paymentcustomer.UserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payment_customer_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "payment_customer_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_customer_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pcq *PaymentCustomerQuery) loadPaymentIntents(ctx context.Context, query *PaymentIntentQuery, nodes []*PaymentCustomer, init func(*PaymentCustomer), assign func(*PaymentCustomer, *PaymentIntent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PaymentCustomer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PaymentIntent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(paymentcustomer.PaymentIntentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payment_customer_payment_intents
		if fk == nil {
			return fmt.Errorf(`foreign-key "payment_customer_payment_intents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_customer_payment_intents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pcq *PaymentCustomerQuery) loadSubscriptions(ctx context.Context, query *SubscriptionQuery, nodes []*PaymentCustomer, init func(*PaymentCustomer), assign func(*PaymentCustomer, *Subscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PaymentCustomer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(paymentcustomer.SubscriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payment_customer_subscriptions
		if fk == nil {
			return fmt.Errorf(`foreign-key "payment_customer_subscriptions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_customer_subscriptions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pcq *PaymentCustomerQuery) loadPaymentMethods(ctx context.Context, query *PaymentMethodQuery, nodes []*PaymentCustomer, init func(*PaymentCustomer), assign func(*PaymentCustomer, *PaymentMethod)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*PaymentCustomer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PaymentMethod(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(paymentcustomer.PaymentMethodsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payment_customer_payment_methods
		if fk == nil {
			return fmt.Errorf(`foreign-key "payment_customer_payment_methods" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payment_customer_payment_methods" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pcq *PaymentCustomerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	_spec.Node.Columns = pcq.ctx.Fields
	if len(pcq.ctx.Fields) > 0 {
		_spec.Unique = pcq.ctx.Unique != nil && *pcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *PaymentCustomerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymentcustomer.Table, paymentcustomer.Columns, sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt))
	_spec.From = pcq.sql
	if unique := pcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcq.path != nil {
		_spec.Unique = true
	}
	if fields := pcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentcustomer.FieldID)
		for i := range fields {
			if fields[i] != paymentcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *PaymentCustomerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(paymentcustomer.Table)
	columns := pcq.ctx.Fields
	if len(columns) == 0 {
		columns = paymentcustomer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.ctx.Unique != nil && *pcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentCustomerGroupBy is the group-by builder for PaymentCustomer entities.
type PaymentCustomerGroupBy struct {
	selector
	build *PaymentCustomerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *PaymentCustomerGroupBy) Aggregate(fns ...AggregateFunc) *PaymentCustomerGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcgb *PaymentCustomerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcgb.build.ctx, ent.OpQueryGroupBy)
	if err := pcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentCustomerQuery, *PaymentCustomerGroupBy](ctx, pcgb.build, pcgb, pcgb.build.inters, v)
}

func (pcgb *PaymentCustomerGroupBy) sqlScan(ctx context.Context, root *PaymentCustomerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcgb.flds)+len(pcgb.fns))
		for _, f := range *pcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentCustomerSelect is the builder for selecting fields of PaymentCustomer entities.
type PaymentCustomerSelect struct {
	*PaymentCustomerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *PaymentCustomerSelect) Aggregate(fns ...AggregateFunc) *PaymentCustomerSelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *PaymentCustomerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcs.ctx, ent.OpQuerySelect)
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentCustomerQuery, *PaymentCustomerSelect](ctx, pcs.PaymentCustomerQuery, pcs, pcs.inters, v)
}

func (pcs *PaymentCustomerSelect) sqlScan(ctx context.Context, root *PaymentCustomerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
