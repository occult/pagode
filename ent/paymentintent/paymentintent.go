// Code generated by ent, DO NOT EDIT.

package paymentintent

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentintent type in the database.
	Label = "payment_intent"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderPaymentIntentID holds the string denoting the provider_payment_intent_id field in the database.
	FieldProviderPaymentIntentID = "provider_payment_intent_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the paymentintent in the database.
	Table = "payment_intents"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "payment_intents"
	// CustomerInverseTable is the table name for the PaymentCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "paymentcustomer" package.
	CustomerInverseTable = "payment_customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "payment_customer_payment_intents"
)

// Columns holds all SQL columns for paymentintent fields.
var Columns = []string{
	FieldID,
	FieldProviderPaymentIntentID,
	FieldProvider,
	FieldStatus,
	FieldAmount,
	FieldCurrency,
	FieldDescription,
	FieldClientSecret,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payment_intents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_customer_payment_intents",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProviderPaymentIntentIDValidator is a validator for the "provider_payment_intent_id" field. It is called by the builders before save.
	ProviderPaymentIntentIDValidator func(string) error
	// DefaultProvider holds the default value on creation for the "provider" field.
	DefaultProvider string
	// ProviderValidator is a validator for the "provider" field. It is called by the builders before save.
	ProviderValidator func(string) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int64) error
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusRequiresPaymentMethod is the default value of the Status enum.
const DefaultStatus = StatusRequiresPaymentMethod

// Status values.
const (
	StatusRequiresPaymentMethod Status = "requires_payment_method"
	StatusRequiresConfirmation  Status = "requires_confirmation"
	StatusRequiresAction        Status = "requires_action"
	StatusProcessing            Status = "processing"
	StatusRequiresCapture       Status = "requires_capture"
	StatusCanceled              Status = "canceled"
	StatusSucceeded             Status = "succeeded"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRequiresPaymentMethod, StatusRequiresConfirmation, StatusRequiresAction, StatusProcessing, StatusRequiresCapture, StatusCanceled, StatusSucceeded:
		return nil
	default:
		return fmt.Errorf("paymentintent: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the PaymentIntent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderPaymentIntentID orders the results by the provider_payment_intent_id field.
func ByProviderPaymentIntentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderPaymentIntentID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
