// Code generated by ent, DO NOT EDIT.

package paymentintent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldID, id))
}

// ProviderPaymentIntentID applies equality check predicate on the "provider_payment_intent_id" field. It's identical to ProviderPaymentIntentIDEQ.
func ProviderPaymentIntentID(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldProviderPaymentIntentID, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldProvider, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCurrency, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldDescription, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldClientSecret, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderPaymentIntentIDEQ applies the EQ predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDNEQ applies the NEQ predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDIn applies the In predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldProviderPaymentIntentID, vs...))
}

// ProviderPaymentIntentIDNotIn applies the NotIn predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldProviderPaymentIntentID, vs...))
}

// ProviderPaymentIntentIDGT applies the GT predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDGTE applies the GTE predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDLT applies the LT predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDLTE applies the LTE predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDContains applies the Contains predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDHasPrefix applies the HasPrefix predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDHasSuffix applies the HasSuffix predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDEqualFold applies the EqualFold predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldProviderPaymentIntentID, v))
}

// ProviderPaymentIntentIDContainsFold applies the ContainsFold predicate on the "provider_payment_intent_id" field.
func ProviderPaymentIntentIDContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldProviderPaymentIntentID, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldProvider, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldStatus, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldCurrency, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldDescription, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretIsNil applies the IsNil predicate on the "client_secret" field.
func ClientSecretIsNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIsNull(FieldClientSecret))
}

// ClientSecretNotNil applies the NotNil predicate on the "client_secret" field.
func ClientSecretNotNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotNull(FieldClientSecret))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldContainsFold(FieldClientSecret, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.PaymentCustomer) predicate.PaymentIntent {
	return predicate.PaymentIntent(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentIntent) predicate.PaymentIntent {
	return predicate.PaymentIntent(sql.NotPredicates(p))
}
