// Code generated by ent, DO NOT EDIT.

package paymentcustomer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldID, id))
}

// ProviderCustomerID applies equality check predicate on the "provider_customer_id" field. It's identical to ProviderCustomerIDEQ.
func ProviderCustomerID(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldProviderCustomerID, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldProvider, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderCustomerIDEQ applies the EQ predicate on the "provider_customer_id" field.
func ProviderCustomerIDEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldProviderCustomerID, v))
}

// ProviderCustomerIDNEQ applies the NEQ predicate on the "provider_customer_id" field.
func ProviderCustomerIDNEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldProviderCustomerID, v))
}

// ProviderCustomerIDIn applies the In predicate on the "provider_customer_id" field.
func ProviderCustomerIDIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldProviderCustomerID, vs...))
}

// ProviderCustomerIDNotIn applies the NotIn predicate on the "provider_customer_id" field.
func ProviderCustomerIDNotIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldProviderCustomerID, vs...))
}

// ProviderCustomerIDGT applies the GT predicate on the "provider_customer_id" field.
func ProviderCustomerIDGT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldProviderCustomerID, v))
}

// ProviderCustomerIDGTE applies the GTE predicate on the "provider_customer_id" field.
func ProviderCustomerIDGTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldProviderCustomerID, v))
}

// ProviderCustomerIDLT applies the LT predicate on the "provider_customer_id" field.
func ProviderCustomerIDLT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldProviderCustomerID, v))
}

// ProviderCustomerIDLTE applies the LTE predicate on the "provider_customer_id" field.
func ProviderCustomerIDLTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldProviderCustomerID, v))
}

// ProviderCustomerIDContains applies the Contains predicate on the "provider_customer_id" field.
func ProviderCustomerIDContains(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContains(FieldProviderCustomerID, v))
}

// ProviderCustomerIDHasPrefix applies the HasPrefix predicate on the "provider_customer_id" field.
func ProviderCustomerIDHasPrefix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasPrefix(FieldProviderCustomerID, v))
}

// ProviderCustomerIDHasSuffix applies the HasSuffix predicate on the "provider_customer_id" field.
func ProviderCustomerIDHasSuffix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasSuffix(FieldProviderCustomerID, v))
}

// ProviderCustomerIDEqualFold applies the EqualFold predicate on the "provider_customer_id" field.
func ProviderCustomerIDEqualFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEqualFold(FieldProviderCustomerID, v))
}

// ProviderCustomerIDContainsFold applies the ContainsFold predicate on the "provider_customer_id" field.
func ProviderCustomerIDContainsFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContainsFold(FieldProviderCustomerID, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContainsFold(FieldProvider, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContainsFold(FieldEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldContainsFold(FieldName, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentIntents applies the HasEdge predicate on the "payment_intents" edge.
func HasPaymentIntents() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentIntentsTable, PaymentIntentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentIntentsWith applies the HasEdge predicate on the "payment_intents" edge with a given conditions (other predicates).
func HasPaymentIntentsWith(preds ...predicate.PaymentIntent) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := newPaymentIntentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptions applies the HasEdge predicate on the "subscriptions" edge.
func HasSubscriptions() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionsWith applies the HasEdge predicate on the "subscriptions" edge with a given conditions (other predicates).
func HasSubscriptionsWith(preds ...predicate.Subscription) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := newSubscriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentMethods applies the HasEdge predicate on the "payment_methods" edge.
func HasPaymentMethods() predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentMethodsTable, PaymentMethodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentMethodsWith applies the HasEdge predicate on the "payment_methods" edge with a given conditions (other predicates).
func HasPaymentMethodsWith(preds ...predicate.PaymentMethod) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(func(s *sql.Selector) {
		step := newPaymentMethodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentCustomer) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentCustomer) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentCustomer) predicate.PaymentCustomer {
	return predicate.PaymentCustomer(sql.NotPredicates(p))
}
