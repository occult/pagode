// Code generated by ent, DO NOT EDIT.

package paymentcustomer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentcustomer type in the database.
	Label = "payment_customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderCustomerID holds the string denoting the provider_customer_id field in the database.
	FieldProviderCustomerID = "provider_customer_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePaymentIntents holds the string denoting the payment_intents edge name in mutations.
	EdgePaymentIntents = "payment_intents"
	// EdgeSubscriptions holds the string denoting the subscriptions edge name in mutations.
	EdgeSubscriptions = "subscriptions"
	// EdgePaymentMethods holds the string denoting the payment_methods edge name in mutations.
	EdgePaymentMethods = "payment_methods"
	// Table holds the table name of the paymentcustomer in the database.
	Table = "payment_customers"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "payment_customer_user"
	// PaymentIntentsTable is the table that holds the payment_intents relation/edge.
	PaymentIntentsTable = "payment_intents"
	// PaymentIntentsInverseTable is the table name for the PaymentIntent entity.
	// It exists in this package in order to avoid circular dependency with the "paymentintent" package.
	PaymentIntentsInverseTable = "payment_intents"
	// PaymentIntentsColumn is the table column denoting the payment_intents relation/edge.
	PaymentIntentsColumn = "payment_customer_payment_intents"
	// SubscriptionsTable is the table that holds the subscriptions relation/edge.
	SubscriptionsTable = "subscriptions"
	// SubscriptionsInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionsInverseTable = "subscriptions"
	// SubscriptionsColumn is the table column denoting the subscriptions relation/edge.
	SubscriptionsColumn = "payment_customer_subscriptions"
	// PaymentMethodsTable is the table that holds the payment_methods relation/edge.
	PaymentMethodsTable = "payment_methods"
	// PaymentMethodsInverseTable is the table name for the PaymentMethod entity.
	// It exists in this package in order to avoid circular dependency with the "paymentmethod" package.
	PaymentMethodsInverseTable = "payment_methods"
	// PaymentMethodsColumn is the table column denoting the payment_methods relation/edge.
	PaymentMethodsColumn = "payment_customer_payment_methods"
)

// Columns holds all SQL columns for paymentcustomer fields.
var Columns = []string{
	FieldID,
	FieldProviderCustomerID,
	FieldProvider,
	FieldEmail,
	FieldName,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ProviderCustomerIDValidator is a validator for the "provider_customer_id" field. It is called by the builders before save.
	ProviderCustomerIDValidator func(string) error
	// DefaultProvider holds the default value on creation for the "provider" field.
	DefaultProvider string
	// ProviderValidator is a validator for the "provider" field. It is called by the builders before save.
	ProviderValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PaymentCustomer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderCustomerID orders the results by the provider_customer_id field.
func ByProviderCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderCustomerID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPaymentIntentsCount orders the results by payment_intents count.
func ByPaymentIntentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentIntentsStep(), opts...)
	}
}

// ByPaymentIntents orders the results by payment_intents terms.
func ByPaymentIntents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentIntentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscriptionsCount orders the results by subscriptions count.
func BySubscriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriptionsStep(), opts...)
	}
}

// BySubscriptions orders the results by subscriptions terms.
func BySubscriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentMethodsCount orders the results by payment_methods count.
func ByPaymentMethodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentMethodsStep(), opts...)
	}
}

// ByPaymentMethods orders the results by payment_methods terms.
func ByPaymentMethods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentMethodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
	)
}
func newPaymentIntentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentIntentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentIntentsTable, PaymentIntentsColumn),
	)
}
func newSubscriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
	)
}
func newPaymentMethodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentMethodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentMethodsTable, PaymentMethodsColumn),
	)
}
