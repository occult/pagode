// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentmethod"
)

// PaymentMethodCreate is the builder for creating a PaymentMethod entity.
type PaymentMethodCreate struct {
	config
	mutation *PaymentMethodMutation
	hooks    []Hook
}

// SetProviderPaymentMethodID sets the "provider_payment_method_id" field.
func (pmc *PaymentMethodCreate) SetProviderPaymentMethodID(s string) *PaymentMethodCreate {
	pmc.mutation.SetProviderPaymentMethodID(s)
	return pmc
}

// SetProvider sets the "provider" field.
func (pmc *PaymentMethodCreate) SetProvider(s string) *PaymentMethodCreate {
	pmc.mutation.SetProvider(s)
	return pmc
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableProvider(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetProvider(*s)
	}
	return pmc
}

// SetType sets the "type" field.
func (pmc *PaymentMethodCreate) SetType(pa paymentmethod.Type) *PaymentMethodCreate {
	pmc.mutation.SetType(pa)
	return pmc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableType(pa *paymentmethod.Type) *PaymentMethodCreate {
	if pa != nil {
		pmc.SetType(*pa)
	}
	return pmc
}

// SetLastFour sets the "last_four" field.
func (pmc *PaymentMethodCreate) SetLastFour(s string) *PaymentMethodCreate {
	pmc.mutation.SetLastFour(s)
	return pmc
}

// SetNillableLastFour sets the "last_four" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableLastFour(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetLastFour(*s)
	}
	return pmc
}

// SetBrand sets the "brand" field.
func (pmc *PaymentMethodCreate) SetBrand(s string) *PaymentMethodCreate {
	pmc.mutation.SetBrand(s)
	return pmc
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableBrand(s *string) *PaymentMethodCreate {
	if s != nil {
		pmc.SetBrand(*s)
	}
	return pmc
}

// SetExpMonth sets the "exp_month" field.
func (pmc *PaymentMethodCreate) SetExpMonth(i int) *PaymentMethodCreate {
	pmc.mutation.SetExpMonth(i)
	return pmc
}

// SetNillableExpMonth sets the "exp_month" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableExpMonth(i *int) *PaymentMethodCreate {
	if i != nil {
		pmc.SetExpMonth(*i)
	}
	return pmc
}

// SetExpYear sets the "exp_year" field.
func (pmc *PaymentMethodCreate) SetExpYear(i int) *PaymentMethodCreate {
	pmc.mutation.SetExpYear(i)
	return pmc
}

// SetNillableExpYear sets the "exp_year" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableExpYear(i *int) *PaymentMethodCreate {
	if i != nil {
		pmc.SetExpYear(*i)
	}
	return pmc
}

// SetIsDefault sets the "is_default" field.
func (pmc *PaymentMethodCreate) SetIsDefault(b bool) *PaymentMethodCreate {
	pmc.mutation.SetIsDefault(b)
	return pmc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableIsDefault(b *bool) *PaymentMethodCreate {
	if b != nil {
		pmc.SetIsDefault(*b)
	}
	return pmc
}

// SetMetadata sets the "metadata" field.
func (pmc *PaymentMethodCreate) SetMetadata(m map[string]interface{}) *PaymentMethodCreate {
	pmc.mutation.SetMetadata(m)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PaymentMethodCreate) SetCreatedAt(t time.Time) *PaymentMethodCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableCreatedAt(t *time.Time) *PaymentMethodCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PaymentMethodCreate) SetUpdatedAt(t time.Time) *PaymentMethodCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PaymentMethodCreate) SetNillableUpdatedAt(t *time.Time) *PaymentMethodCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetCustomerID sets the "customer" edge to the PaymentCustomer entity by ID.
func (pmc *PaymentMethodCreate) SetCustomerID(id int) *PaymentMethodCreate {
	pmc.mutation.SetCustomerID(id)
	return pmc
}

// SetCustomer sets the "customer" edge to the PaymentCustomer entity.
func (pmc *PaymentMethodCreate) SetCustomer(p *PaymentCustomer) *PaymentMethodCreate {
	return pmc.SetCustomerID(p.ID)
}

// Mutation returns the PaymentMethodMutation object of the builder.
func (pmc *PaymentMethodCreate) Mutation() *PaymentMethodMutation {
	return pmc.mutation
}

// Save creates the PaymentMethod in the database.
func (pmc *PaymentMethodCreate) Save(ctx context.Context) (*PaymentMethod, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PaymentMethodCreate) SaveX(ctx context.Context) *PaymentMethod {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PaymentMethodCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PaymentMethodCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PaymentMethodCreate) defaults() {
	if _, ok := pmc.mutation.Provider(); !ok {
		v := paymentmethod.DefaultProvider
		pmc.mutation.SetProvider(v)
	}
	if _, ok := pmc.mutation.GetType(); !ok {
		v := paymentmethod.DefaultType
		pmc.mutation.SetType(v)
	}
	if _, ok := pmc.mutation.IsDefault(); !ok {
		v := paymentmethod.DefaultIsDefault
		pmc.mutation.SetIsDefault(v)
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := paymentmethod.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := paymentmethod.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PaymentMethodCreate) check() error {
	if _, ok := pmc.mutation.ProviderPaymentMethodID(); !ok {
		return &ValidationError{Name: "provider_payment_method_id", err: errors.New(`ent: missing required field "PaymentMethod.provider_payment_method_id"`)}
	}
	if v, ok := pmc.mutation.ProviderPaymentMethodID(); ok {
		if err := paymentmethod.ProviderPaymentMethodIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_payment_method_id", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.provider_payment_method_id": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "PaymentMethod.provider"`)}
	}
	if v, ok := pmc.mutation.Provider(); ok {
		if err := paymentmethod.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.provider": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PaymentMethod.type"`)}
	}
	if v, ok := pmc.mutation.GetType(); ok {
		if err := paymentmethod.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.type": %w`, err)}
		}
	}
	if v, ok := pmc.mutation.ExpMonth(); ok {
		if err := paymentmethod.ExpMonthValidator(v); err != nil {
			return &ValidationError{Name: "exp_month", err: fmt.Errorf(`ent: validator failed for field "PaymentMethod.exp_month": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "PaymentMethod.is_default"`)}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentMethod.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentMethod.updated_at"`)}
	}
	if len(pmc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "PaymentMethod.customer"`)}
	}
	return nil
}

func (pmc *PaymentMethodCreate) sqlSave(ctx context.Context) (*PaymentMethod, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PaymentMethodCreate) createSpec() (*PaymentMethod, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentMethod{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(paymentmethod.Table, sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt))
	)
	if value, ok := pmc.mutation.ProviderPaymentMethodID(); ok {
		_spec.SetField(paymentmethod.FieldProviderPaymentMethodID, field.TypeString, value)
		_node.ProviderPaymentMethodID = value
	}
	if value, ok := pmc.mutation.Provider(); ok {
		_spec.SetField(paymentmethod.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := pmc.mutation.GetType(); ok {
		_spec.SetField(paymentmethod.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pmc.mutation.LastFour(); ok {
		_spec.SetField(paymentmethod.FieldLastFour, field.TypeString, value)
		_node.LastFour = value
	}
	if value, ok := pmc.mutation.Brand(); ok {
		_spec.SetField(paymentmethod.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := pmc.mutation.ExpMonth(); ok {
		_spec.SetField(paymentmethod.FieldExpMonth, field.TypeInt, value)
		_node.ExpMonth = value
	}
	if value, ok := pmc.mutation.ExpYear(); ok {
		_spec.SetField(paymentmethod.FieldExpYear, field.TypeInt, value)
		_node.ExpYear = value
	}
	if value, ok := pmc.mutation.IsDefault(); ok {
		_spec.SetField(paymentmethod.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := pmc.mutation.Metadata(); ok {
		_spec.SetField(paymentmethod.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(paymentmethod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentmethod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pmc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentmethod.CustomerTable,
			Columns: []string{paymentmethod.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_customer_payment_methods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentMethodCreateBulk is the builder for creating many PaymentMethod entities in bulk.
type PaymentMethodCreateBulk struct {
	config
	err      error
	builders []*PaymentMethodCreate
}

// Save creates the PaymentMethod entities in the database.
func (pmcb *PaymentMethodCreateBulk) Save(ctx context.Context) ([]*PaymentMethod, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PaymentMethod, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMethodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PaymentMethodCreateBulk) SaveX(ctx context.Context) []*PaymentMethod {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PaymentMethodCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PaymentMethodCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
