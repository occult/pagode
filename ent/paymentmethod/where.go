// Code generated by ent, DO NOT EDIT.

package paymentmethod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldID, id))
}

// ProviderPaymentMethodID applies equality check predicate on the "provider_payment_method_id" field. It's identical to ProviderPaymentMethodIDEQ.
func ProviderPaymentMethodID(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProviderPaymentMethodID, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProvider, v))
}

// LastFour applies equality check predicate on the "last_four" field. It's identical to LastFourEQ.
func LastFour(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldLastFour, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldBrand, v))
}

// ExpMonth applies equality check predicate on the "exp_month" field. It's identical to ExpMonthEQ.
func ExpMonth(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpMonth, v))
}

// ExpYear applies equality check predicate on the "exp_year" field. It's identical to ExpYearEQ.
func ExpYear(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpYear, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsDefault, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderPaymentMethodIDEQ applies the EQ predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDNEQ applies the NEQ predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDIn applies the In predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldProviderPaymentMethodID, vs...))
}

// ProviderPaymentMethodIDNotIn applies the NotIn predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldProviderPaymentMethodID, vs...))
}

// ProviderPaymentMethodIDGT applies the GT predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDGTE applies the GTE predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDLT applies the LT predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDLTE applies the LTE predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDContains applies the Contains predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDHasPrefix applies the HasPrefix predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDHasSuffix applies the HasSuffix predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDEqualFold applies the EqualFold predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldProviderPaymentMethodID, v))
}

// ProviderPaymentMethodIDContainsFold applies the ContainsFold predicate on the "provider_payment_method_id" field.
func ProviderPaymentMethodIDContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldProviderPaymentMethodID, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldProvider, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldType, vs...))
}

// LastFourEQ applies the EQ predicate on the "last_four" field.
func LastFourEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldLastFour, v))
}

// LastFourNEQ applies the NEQ predicate on the "last_four" field.
func LastFourNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldLastFour, v))
}

// LastFourIn applies the In predicate on the "last_four" field.
func LastFourIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldLastFour, vs...))
}

// LastFourNotIn applies the NotIn predicate on the "last_four" field.
func LastFourNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldLastFour, vs...))
}

// LastFourGT applies the GT predicate on the "last_four" field.
func LastFourGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldLastFour, v))
}

// LastFourGTE applies the GTE predicate on the "last_four" field.
func LastFourGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldLastFour, v))
}

// LastFourLT applies the LT predicate on the "last_four" field.
func LastFourLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldLastFour, v))
}

// LastFourLTE applies the LTE predicate on the "last_four" field.
func LastFourLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldLastFour, v))
}

// LastFourContains applies the Contains predicate on the "last_four" field.
func LastFourContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldLastFour, v))
}

// LastFourHasPrefix applies the HasPrefix predicate on the "last_four" field.
func LastFourHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldLastFour, v))
}

// LastFourHasSuffix applies the HasSuffix predicate on the "last_four" field.
func LastFourHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldLastFour, v))
}

// LastFourIsNil applies the IsNil predicate on the "last_four" field.
func LastFourIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldLastFour))
}

// LastFourNotNil applies the NotNil predicate on the "last_four" field.
func LastFourNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldLastFour))
}

// LastFourEqualFold applies the EqualFold predicate on the "last_four" field.
func LastFourEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldLastFour, v))
}

// LastFourContainsFold applies the ContainsFold predicate on the "last_four" field.
func LastFourContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldLastFour, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandIsNil applies the IsNil predicate on the "brand" field.
func BrandIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldBrand))
}

// BrandNotNil applies the NotNil predicate on the "brand" field.
func BrandNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldBrand))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldContainsFold(FieldBrand, v))
}

// ExpMonthEQ applies the EQ predicate on the "exp_month" field.
func ExpMonthEQ(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpMonth, v))
}

// ExpMonthNEQ applies the NEQ predicate on the "exp_month" field.
func ExpMonthNEQ(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldExpMonth, v))
}

// ExpMonthIn applies the In predicate on the "exp_month" field.
func ExpMonthIn(vs ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldExpMonth, vs...))
}

// ExpMonthNotIn applies the NotIn predicate on the "exp_month" field.
func ExpMonthNotIn(vs ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldExpMonth, vs...))
}

// ExpMonthGT applies the GT predicate on the "exp_month" field.
func ExpMonthGT(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldExpMonth, v))
}

// ExpMonthGTE applies the GTE predicate on the "exp_month" field.
func ExpMonthGTE(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldExpMonth, v))
}

// ExpMonthLT applies the LT predicate on the "exp_month" field.
func ExpMonthLT(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldExpMonth, v))
}

// ExpMonthLTE applies the LTE predicate on the "exp_month" field.
func ExpMonthLTE(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldExpMonth, v))
}

// ExpMonthIsNil applies the IsNil predicate on the "exp_month" field.
func ExpMonthIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldExpMonth))
}

// ExpMonthNotNil applies the NotNil predicate on the "exp_month" field.
func ExpMonthNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldExpMonth))
}

// ExpYearEQ applies the EQ predicate on the "exp_year" field.
func ExpYearEQ(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldExpYear, v))
}

// ExpYearNEQ applies the NEQ predicate on the "exp_year" field.
func ExpYearNEQ(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldExpYear, v))
}

// ExpYearIn applies the In predicate on the "exp_year" field.
func ExpYearIn(vs ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldExpYear, vs...))
}

// ExpYearNotIn applies the NotIn predicate on the "exp_year" field.
func ExpYearNotIn(vs ...int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldExpYear, vs...))
}

// ExpYearGT applies the GT predicate on the "exp_year" field.
func ExpYearGT(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldExpYear, v))
}

// ExpYearGTE applies the GTE predicate on the "exp_year" field.
func ExpYearGTE(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldExpYear, v))
}

// ExpYearLT applies the LT predicate on the "exp_year" field.
func ExpYearLT(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldExpYear, v))
}

// ExpYearLTE applies the LTE predicate on the "exp_year" field.
func ExpYearLTE(v int) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldExpYear, v))
}

// ExpYearIsNil applies the IsNil predicate on the "exp_year" field.
func ExpYearIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldExpYear))
}

// ExpYearNotNil applies the NotNil predicate on the "exp_year" field.
func ExpYearNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldExpYear))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldIsDefault, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.PaymentCustomer) predicate.PaymentMethod {
	return predicate.PaymentMethod(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentMethod) predicate.PaymentMethod {
	return predicate.PaymentMethod(sql.NotPredicates(p))
}
