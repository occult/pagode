// Code generated by ent, DO NOT EDIT.

package paymentmethod

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentmethod type in the database.
	Label = "payment_method"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderPaymentMethodID holds the string denoting the provider_payment_method_id field in the database.
	FieldProviderPaymentMethodID = "provider_payment_method_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLastFour holds the string denoting the last_four field in the database.
	FieldLastFour = "last_four"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldExpMonth holds the string denoting the exp_month field in the database.
	FieldExpMonth = "exp_month"
	// FieldExpYear holds the string denoting the exp_year field in the database.
	FieldExpYear = "exp_year"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the paymentmethod in the database.
	Table = "payment_methods"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "payment_methods"
	// CustomerInverseTable is the table name for the PaymentCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "paymentcustomer" package.
	CustomerInverseTable = "payment_customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "payment_customer_payment_methods"
)

// Columns holds all SQL columns for paymentmethod fields.
var Columns = []string{
	FieldID,
	FieldProviderPaymentMethodID,
	FieldProvider,
	FieldType,
	FieldLastFour,
	FieldBrand,
	FieldExpMonth,
	FieldExpYear,
	FieldIsDefault,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payment_methods"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_customer_payment_methods",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProviderPaymentMethodIDValidator is a validator for the "provider_payment_method_id" field. It is called by the builders before save.
	ProviderPaymentMethodIDValidator func(string) error
	// DefaultProvider holds the default value on creation for the "provider" field.
	DefaultProvider string
	// ProviderValidator is a validator for the "provider" field. It is called by the builders before save.
	ProviderValidator func(string) error
	// ExpMonthValidator is a validator for the "exp_month" field. It is called by the builders before save.
	ExpMonthValidator func(int) error
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeCard is the default value of the Type enum.
const DefaultType = TypeCard

// Type values.
const (
	TypeCard        Type = "card"
	TypeBankAccount Type = "bank_account"
	TypeWallet      Type = "wallet"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCard, TypeBankAccount, TypeWallet:
		return nil
	default:
		return fmt.Errorf("paymentmethod: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the PaymentMethod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderPaymentMethodID orders the results by the provider_payment_method_id field.
func ByProviderPaymentMethodID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderPaymentMethodID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLastFour orders the results by the last_four field.
func ByLastFour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFour, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByExpMonth orders the results by the exp_month field.
func ByExpMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpMonth, opts...).ToFunc()
}

// ByExpYear orders the results by the exp_year field.
func ByExpYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpYear, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
