// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderSubscriptionID holds the string denoting the provider_subscription_id field in the database.
	FieldProviderSubscriptionID = "provider_subscription_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriceID holds the string denoting the price_id field in the database.
	FieldPriceID = "price_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldInterval holds the string denoting the interval field in the database.
	FieldInterval = "interval"
	// FieldIntervalCount holds the string denoting the interval_count field in the database.
	FieldIntervalCount = "interval_count"
	// FieldCurrentPeriodStart holds the string denoting the current_period_start field in the database.
	FieldCurrentPeriodStart = "current_period_start"
	// FieldCurrentPeriodEnd holds the string denoting the current_period_end field in the database.
	FieldCurrentPeriodEnd = "current_period_end"
	// FieldTrialStart holds the string denoting the trial_start field in the database.
	FieldTrialStart = "trial_start"
	// FieldTrialEnd holds the string denoting the trial_end field in the database.
	FieldTrialEnd = "trial_end"
	// FieldCanceledAt holds the string denoting the canceled_at field in the database.
	FieldCanceledAt = "canceled_at"
	// FieldEndedAt holds the string denoting the ended_at field in the database.
	FieldEndedAt = "ended_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "subscriptions"
	// CustomerInverseTable is the table name for the PaymentCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "paymentcustomer" package.
	CustomerInverseTable = "payment_customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "payment_customer_subscriptions"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldProviderSubscriptionID,
	FieldProvider,
	FieldStatus,
	FieldPriceID,
	FieldAmount,
	FieldCurrency,
	FieldInterval,
	FieldIntervalCount,
	FieldCurrentPeriodStart,
	FieldCurrentPeriodEnd,
	FieldTrialStart,
	FieldTrialEnd,
	FieldCanceledAt,
	FieldEndedAt,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subscriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_customer_subscriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProviderSubscriptionIDValidator is a validator for the "provider_subscription_id" field. It is called by the builders before save.
	ProviderSubscriptionIDValidator func(string) error
	// DefaultProvider holds the default value on creation for the "provider" field.
	DefaultProvider string
	// ProviderValidator is a validator for the "provider" field. It is called by the builders before save.
	ProviderValidator func(string) error
	// PriceIDValidator is a validator for the "price_id" field. It is called by the builders before save.
	PriceIDValidator func(string) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int64) error
	// DefaultCurrency holds the default value on creation for the "currency" field.
	DefaultCurrency string
	// CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	CurrencyValidator func(string) error
	// DefaultIntervalCount holds the default value on creation for the "interval_count" field.
	DefaultIntervalCount int
	// IntervalCountValidator is a validator for the "interval_count" field. It is called by the builders before save.
	IntervalCountValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusIncomplete is the default value of the Status enum.
const DefaultStatus = StatusIncomplete

// Status values.
const (
	StatusIncomplete        Status = "incomplete"
	StatusIncompleteExpired Status = "incomplete_expired"
	StatusTrialing          Status = "trialing"
	StatusActive            Status = "active"
	StatusPastDue           Status = "past_due"
	StatusCanceled          Status = "canceled"
	StatusUnpaid            Status = "unpaid"
	StatusPaused            Status = "paused"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusIncomplete, StatusIncompleteExpired, StatusTrialing, StatusActive, StatusPastDue, StatusCanceled, StatusUnpaid, StatusPaused:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for status field: %q", s)
	}
}

// Interval defines the type for the "interval" enum field.
type Interval string

// Interval values.
const (
	IntervalDay   Interval = "day"
	IntervalWeek  Interval = "week"
	IntervalMonth Interval = "month"
	IntervalYear  Interval = "year"
)

func (i Interval) String() string {
	return string(i)
}

// IntervalValidator is a validator for the "interval" field enum values. It is called by the builders before save.
func IntervalValidator(i Interval) error {
	switch i {
	case IntervalDay, IntervalWeek, IntervalMonth, IntervalYear:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for interval field: %q", i)
	}
}

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderSubscriptionID orders the results by the provider_subscription_id field.
func ByProviderSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderSubscriptionID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriceID orders the results by the price_id field.
func ByPriceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByInterval orders the results by the interval field.
func ByInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterval, opts...).ToFunc()
}

// ByIntervalCount orders the results by the interval_count field.
func ByIntervalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntervalCount, opts...).ToFunc()
}

// ByCurrentPeriodStart orders the results by the current_period_start field.
func ByCurrentPeriodStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodStart, opts...).ToFunc()
}

// ByCurrentPeriodEnd orders the results by the current_period_end field.
func ByCurrentPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPeriodEnd, opts...).ToFunc()
}

// ByTrialStart orders the results by the trial_start field.
func ByTrialStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialStart, opts...).ToFunc()
}

// ByTrialEnd orders the results by the trial_end field.
func ByTrialEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrialEnd, opts...).ToFunc()
}

// ByCanceledAt orders the results by the canceled_at field.
func ByCanceledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanceledAt, opts...).ToFunc()
}

// ByEndedAt orders the results by the ended_at field.
func ByEndedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
