// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/occult/pagode/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// ProviderSubscriptionID applies equality check predicate on the "provider_subscription_id" field. It's identical to ProviderSubscriptionIDEQ.
func ProviderSubscriptionID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldProviderSubscriptionID, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldProvider, v))
}

// PriceID applies equality check predicate on the "price_id" field. It's identical to PriceIDEQ.
func PriceID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPriceID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAmount, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrency, v))
}

// IntervalCount applies equality check predicate on the "interval_count" field. It's identical to IntervalCountEQ.
func IntervalCount(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldIntervalCount, v))
}

// CurrentPeriodStart applies equality check predicate on the "current_period_start" field. It's identical to CurrentPeriodStartEQ.
func CurrentPeriodStart(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodEnd applies equality check predicate on the "current_period_end" field. It's identical to CurrentPeriodEndEQ.
func CurrentPeriodEnd(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// TrialStart applies equality check predicate on the "trial_start" field. It's identical to TrialStartEQ.
func TrialStart(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialEnd applies equality check predicate on the "trial_end" field. It's identical to TrialEndEQ.
func TrialEnd(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialEnd, v))
}

// CanceledAt applies equality check predicate on the "canceled_at" field. It's identical to CanceledAtEQ.
func CanceledAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCanceledAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEndedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderSubscriptionIDEQ applies the EQ predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDNEQ applies the NEQ predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDIn applies the In predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldProviderSubscriptionID, vs...))
}

// ProviderSubscriptionIDNotIn applies the NotIn predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldProviderSubscriptionID, vs...))
}

// ProviderSubscriptionIDGT applies the GT predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDGTE applies the GTE predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDLT applies the LT predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDLTE applies the LTE predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDContains applies the Contains predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDHasPrefix applies the HasPrefix predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDHasSuffix applies the HasSuffix predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDEqualFold applies the EqualFold predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldProviderSubscriptionID, v))
}

// ProviderSubscriptionIDContainsFold applies the ContainsFold predicate on the "provider_subscription_id" field.
func ProviderSubscriptionIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldProviderSubscriptionID, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldProvider, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStatus, vs...))
}

// PriceIDEQ applies the EQ predicate on the "price_id" field.
func PriceIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPriceID, v))
}

// PriceIDNEQ applies the NEQ predicate on the "price_id" field.
func PriceIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPriceID, v))
}

// PriceIDIn applies the In predicate on the "price_id" field.
func PriceIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPriceID, vs...))
}

// PriceIDNotIn applies the NotIn predicate on the "price_id" field.
func PriceIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPriceID, vs...))
}

// PriceIDGT applies the GT predicate on the "price_id" field.
func PriceIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPriceID, v))
}

// PriceIDGTE applies the GTE predicate on the "price_id" field.
func PriceIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPriceID, v))
}

// PriceIDLT applies the LT predicate on the "price_id" field.
func PriceIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPriceID, v))
}

// PriceIDLTE applies the LTE predicate on the "price_id" field.
func PriceIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPriceID, v))
}

// PriceIDContains applies the Contains predicate on the "price_id" field.
func PriceIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPriceID, v))
}

// PriceIDHasPrefix applies the HasPrefix predicate on the "price_id" field.
func PriceIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPriceID, v))
}

// PriceIDHasSuffix applies the HasSuffix predicate on the "price_id" field.
func PriceIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPriceID, v))
}

// PriceIDEqualFold applies the EqualFold predicate on the "price_id" field.
func PriceIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPriceID, v))
}

// PriceIDContainsFold applies the ContainsFold predicate on the "price_id" field.
func PriceIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPriceID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldAmount, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldCurrency, v))
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldInterval, v))
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldInterval, v))
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldInterval, vs...))
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldInterval, vs...))
}

// IntervalCountEQ applies the EQ predicate on the "interval_count" field.
func IntervalCountEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldIntervalCount, v))
}

// IntervalCountNEQ applies the NEQ predicate on the "interval_count" field.
func IntervalCountNEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldIntervalCount, v))
}

// IntervalCountIn applies the In predicate on the "interval_count" field.
func IntervalCountIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldIntervalCount, vs...))
}

// IntervalCountNotIn applies the NotIn predicate on the "interval_count" field.
func IntervalCountNotIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldIntervalCount, vs...))
}

// IntervalCountGT applies the GT predicate on the "interval_count" field.
func IntervalCountGT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldIntervalCount, v))
}

// IntervalCountGTE applies the GTE predicate on the "interval_count" field.
func IntervalCountGTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldIntervalCount, v))
}

// IntervalCountLT applies the LT predicate on the "interval_count" field.
func IntervalCountLT(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldIntervalCount, v))
}

// IntervalCountLTE applies the LTE predicate on the "interval_count" field.
func IntervalCountLTE(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldIntervalCount, v))
}

// CurrentPeriodStartEQ applies the EQ predicate on the "current_period_start" field.
func CurrentPeriodStartEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartNEQ applies the NEQ predicate on the "current_period_start" field.
func CurrentPeriodStartNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartIn applies the In predicate on the "current_period_start" field.
func CurrentPeriodStartIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartNotIn applies the NotIn predicate on the "current_period_start" field.
func CurrentPeriodStartNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrentPeriodStart, vs...))
}

// CurrentPeriodStartGT applies the GT predicate on the "current_period_start" field.
func CurrentPeriodStartGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartGTE applies the GTE predicate on the "current_period_start" field.
func CurrentPeriodStartGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLT applies the LT predicate on the "current_period_start" field.
func CurrentPeriodStartLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartLTE applies the LTE predicate on the "current_period_start" field.
func CurrentPeriodStartLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrentPeriodStart, v))
}

// CurrentPeriodStartIsNil applies the IsNil predicate on the "current_period_start" field.
func CurrentPeriodStartIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCurrentPeriodStart))
}

// CurrentPeriodStartNotNil applies the NotNil predicate on the "current_period_start" field.
func CurrentPeriodStartNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCurrentPeriodStart))
}

// CurrentPeriodEndEQ applies the EQ predicate on the "current_period_end" field.
func CurrentPeriodEndEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndNEQ applies the NEQ predicate on the "current_period_end" field.
func CurrentPeriodEndNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIn applies the In predicate on the "current_period_end" field.
func CurrentPeriodEndIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndNotIn applies the NotIn predicate on the "current_period_end" field.
func CurrentPeriodEndNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndGT applies the GT predicate on the "current_period_end" field.
func CurrentPeriodEndGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndGTE applies the GTE predicate on the "current_period_end" field.
func CurrentPeriodEndGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLT applies the LT predicate on the "current_period_end" field.
func CurrentPeriodEndLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLTE applies the LTE predicate on the "current_period_end" field.
func CurrentPeriodEndLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIsNil applies the IsNil predicate on the "current_period_end" field.
func CurrentPeriodEndIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCurrentPeriodEnd))
}

// CurrentPeriodEndNotNil applies the NotNil predicate on the "current_period_end" field.
func CurrentPeriodEndNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCurrentPeriodEnd))
}

// TrialStartEQ applies the EQ predicate on the "trial_start" field.
func TrialStartEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialStart, v))
}

// TrialStartNEQ applies the NEQ predicate on the "trial_start" field.
func TrialStartNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTrialStart, v))
}

// TrialStartIn applies the In predicate on the "trial_start" field.
func TrialStartIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTrialStart, vs...))
}

// TrialStartNotIn applies the NotIn predicate on the "trial_start" field.
func TrialStartNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTrialStart, vs...))
}

// TrialStartGT applies the GT predicate on the "trial_start" field.
func TrialStartGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTrialStart, v))
}

// TrialStartGTE applies the GTE predicate on the "trial_start" field.
func TrialStartGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTrialStart, v))
}

// TrialStartLT applies the LT predicate on the "trial_start" field.
func TrialStartLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTrialStart, v))
}

// TrialStartLTE applies the LTE predicate on the "trial_start" field.
func TrialStartLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTrialStart, v))
}

// TrialStartIsNil applies the IsNil predicate on the "trial_start" field.
func TrialStartIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldTrialStart))
}

// TrialStartNotNil applies the NotNil predicate on the "trial_start" field.
func TrialStartNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldTrialStart))
}

// TrialEndEQ applies the EQ predicate on the "trial_end" field.
func TrialEndEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTrialEnd, v))
}

// TrialEndNEQ applies the NEQ predicate on the "trial_end" field.
func TrialEndNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTrialEnd, v))
}

// TrialEndIn applies the In predicate on the "trial_end" field.
func TrialEndIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTrialEnd, vs...))
}

// TrialEndNotIn applies the NotIn predicate on the "trial_end" field.
func TrialEndNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTrialEnd, vs...))
}

// TrialEndGT applies the GT predicate on the "trial_end" field.
func TrialEndGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTrialEnd, v))
}

// TrialEndGTE applies the GTE predicate on the "trial_end" field.
func TrialEndGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTrialEnd, v))
}

// TrialEndLT applies the LT predicate on the "trial_end" field.
func TrialEndLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTrialEnd, v))
}

// TrialEndLTE applies the LTE predicate on the "trial_end" field.
func TrialEndLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTrialEnd, v))
}

// TrialEndIsNil applies the IsNil predicate on the "trial_end" field.
func TrialEndIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldTrialEnd))
}

// TrialEndNotNil applies the NotNil predicate on the "trial_end" field.
func TrialEndNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldTrialEnd))
}

// CanceledAtEQ applies the EQ predicate on the "canceled_at" field.
func CanceledAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCanceledAt, v))
}

// CanceledAtNEQ applies the NEQ predicate on the "canceled_at" field.
func CanceledAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCanceledAt, v))
}

// CanceledAtIn applies the In predicate on the "canceled_at" field.
func CanceledAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCanceledAt, vs...))
}

// CanceledAtNotIn applies the NotIn predicate on the "canceled_at" field.
func CanceledAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCanceledAt, vs...))
}

// CanceledAtGT applies the GT predicate on the "canceled_at" field.
func CanceledAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCanceledAt, v))
}

// CanceledAtGTE applies the GTE predicate on the "canceled_at" field.
func CanceledAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCanceledAt, v))
}

// CanceledAtLT applies the LT predicate on the "canceled_at" field.
func CanceledAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCanceledAt, v))
}

// CanceledAtLTE applies the LTE predicate on the "canceled_at" field.
func CanceledAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCanceledAt, v))
}

// CanceledAtIsNil applies the IsNil predicate on the "canceled_at" field.
func CanceledAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCanceledAt))
}

// CanceledAtNotNil applies the NotNil predicate on the "canceled_at" field.
func CanceledAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCanceledAt))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldEndedAt))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.PaymentCustomer) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}
