// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentintent"
	"github.com/occult/pagode/ent/paymentmethod"
	"github.com/occult/pagode/ent/predicate"
	"github.com/occult/pagode/ent/subscription"
	"github.com/occult/pagode/ent/user"
)

// PaymentCustomerUpdate is the builder for updating PaymentCustomer entities.
type PaymentCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentCustomerMutation
}

// Where appends a list predicates to the PaymentCustomerUpdate builder.
func (pcu *PaymentCustomerUpdate) Where(ps ...predicate.PaymentCustomer) *PaymentCustomerUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetProviderCustomerID sets the "provider_customer_id" field.
func (pcu *PaymentCustomerUpdate) SetProviderCustomerID(s string) *PaymentCustomerUpdate {
	pcu.mutation.SetProviderCustomerID(s)
	return pcu
}

// SetNillableProviderCustomerID sets the "provider_customer_id" field if the given value is not nil.
func (pcu *PaymentCustomerUpdate) SetNillableProviderCustomerID(s *string) *PaymentCustomerUpdate {
	if s != nil {
		pcu.SetProviderCustomerID(*s)
	}
	return pcu
}

// SetProvider sets the "provider" field.
func (pcu *PaymentCustomerUpdate) SetProvider(s string) *PaymentCustomerUpdate {
	pcu.mutation.SetProvider(s)
	return pcu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pcu *PaymentCustomerUpdate) SetNillableProvider(s *string) *PaymentCustomerUpdate {
	if s != nil {
		pcu.SetProvider(*s)
	}
	return pcu
}

// SetEmail sets the "email" field.
func (pcu *PaymentCustomerUpdate) SetEmail(s string) *PaymentCustomerUpdate {
	pcu.mutation.SetEmail(s)
	return pcu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pcu *PaymentCustomerUpdate) SetNillableEmail(s *string) *PaymentCustomerUpdate {
	if s != nil {
		pcu.SetEmail(*s)
	}
	return pcu
}

// SetName sets the "name" field.
func (pcu *PaymentCustomerUpdate) SetName(s string) *PaymentCustomerUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *PaymentCustomerUpdate) SetNillableName(s *string) *PaymentCustomerUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// ClearName clears the value of the "name" field.
func (pcu *PaymentCustomerUpdate) ClearName() *PaymentCustomerUpdate {
	pcu.mutation.ClearName()
	return pcu
}

// SetMetadata sets the "metadata" field.
func (pcu *PaymentCustomerUpdate) SetMetadata(m map[string]interface{}) *PaymentCustomerUpdate {
	pcu.mutation.SetMetadata(m)
	return pcu
}

// ClearMetadata clears the value of the "metadata" field.
func (pcu *PaymentCustomerUpdate) ClearMetadata() *PaymentCustomerUpdate {
	pcu.mutation.ClearMetadata()
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PaymentCustomerUpdate) SetUpdatedAt(t time.Time) *PaymentCustomerUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pcu *PaymentCustomerUpdate) SetUserID(id int) *PaymentCustomerUpdate {
	pcu.mutation.SetUserID(id)
	return pcu
}

// SetUser sets the "user" edge to the User entity.
func (pcu *PaymentCustomerUpdate) SetUser(u *User) *PaymentCustomerUpdate {
	return pcu.SetUserID(u.ID)
}

// AddPaymentIntentIDs adds the "payment_intents" edge to the PaymentIntent entity by IDs.
func (pcu *PaymentCustomerUpdate) AddPaymentIntentIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.AddPaymentIntentIDs(ids...)
	return pcu
}

// AddPaymentIntents adds the "payment_intents" edges to the PaymentIntent entity.
func (pcu *PaymentCustomerUpdate) AddPaymentIntents(p ...*PaymentIntent) *PaymentCustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPaymentIntentIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (pcu *PaymentCustomerUpdate) AddSubscriptionIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.AddSubscriptionIDs(ids...)
	return pcu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (pcu *PaymentCustomerUpdate) AddSubscriptions(s ...*Subscription) *PaymentCustomerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pcu.AddSubscriptionIDs(ids...)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (pcu *PaymentCustomerUpdate) AddPaymentMethodIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.AddPaymentMethodIDs(ids...)
	return pcu
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (pcu *PaymentCustomerUpdate) AddPaymentMethods(p ...*PaymentMethod) *PaymentCustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPaymentMethodIDs(ids...)
}

// Mutation returns the PaymentCustomerMutation object of the builder.
func (pcu *PaymentCustomerUpdate) Mutation() *PaymentCustomerMutation {
	return pcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pcu *PaymentCustomerUpdate) ClearUser() *PaymentCustomerUpdate {
	pcu.mutation.ClearUser()
	return pcu
}

// ClearPaymentIntents clears all "payment_intents" edges to the PaymentIntent entity.
func (pcu *PaymentCustomerUpdate) ClearPaymentIntents() *PaymentCustomerUpdate {
	pcu.mutation.ClearPaymentIntents()
	return pcu
}

// RemovePaymentIntentIDs removes the "payment_intents" edge to PaymentIntent entities by IDs.
func (pcu *PaymentCustomerUpdate) RemovePaymentIntentIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.RemovePaymentIntentIDs(ids...)
	return pcu
}

// RemovePaymentIntents removes "payment_intents" edges to PaymentIntent entities.
func (pcu *PaymentCustomerUpdate) RemovePaymentIntents(p ...*PaymentIntent) *PaymentCustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePaymentIntentIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (pcu *PaymentCustomerUpdate) ClearSubscriptions() *PaymentCustomerUpdate {
	pcu.mutation.ClearSubscriptions()
	return pcu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (pcu *PaymentCustomerUpdate) RemoveSubscriptionIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.RemoveSubscriptionIDs(ids...)
	return pcu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (pcu *PaymentCustomerUpdate) RemoveSubscriptions(s ...*Subscription) *PaymentCustomerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pcu.RemoveSubscriptionIDs(ids...)
}

// ClearPaymentMethods clears all "payment_methods" edges to the PaymentMethod entity.
func (pcu *PaymentCustomerUpdate) ClearPaymentMethods() *PaymentCustomerUpdate {
	pcu.mutation.ClearPaymentMethods()
	return pcu
}

// RemovePaymentMethodIDs removes the "payment_methods" edge to PaymentMethod entities by IDs.
func (pcu *PaymentCustomerUpdate) RemovePaymentMethodIDs(ids ...int) *PaymentCustomerUpdate {
	pcu.mutation.RemovePaymentMethodIDs(ids...)
	return pcu
}

// RemovePaymentMethods removes "payment_methods" edges to PaymentMethod entities.
func (pcu *PaymentCustomerUpdate) RemovePaymentMethods(p ...*PaymentMethod) *PaymentCustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePaymentMethodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PaymentCustomerUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PaymentCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PaymentCustomerUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PaymentCustomerUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PaymentCustomerUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := paymentcustomer.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PaymentCustomerUpdate) check() error {
	if v, ok := pcu.mutation.ProviderCustomerID(); ok {
		if err := paymentcustomer.ProviderCustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_customer_id", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider_customer_id": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.Provider(); ok {
		if err := paymentcustomer.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.Email(); ok {
		if err := paymentcustomer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.email": %w`, err)}
		}
	}
	if pcu.mutation.UserCleared() && len(pcu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentCustomer.user"`)
	}
	return nil
}

func (pcu *PaymentCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentcustomer.Table, paymentcustomer.Columns, sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.ProviderCustomerID(); ok {
		_spec.SetField(paymentcustomer.FieldProviderCustomerID, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Provider(); ok {
		_spec.SetField(paymentcustomer.FieldProvider, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Email(); ok {
		_spec.SetField(paymentcustomer.FieldEmail, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(paymentcustomer.FieldName, field.TypeString, value)
	}
	if pcu.mutation.NameCleared() {
		_spec.ClearField(paymentcustomer.FieldName, field.TypeString)
	}
	if value, ok := pcu.mutation.Metadata(); ok {
		_spec.SetField(paymentcustomer.FieldMetadata, field.TypeJSON, value)
	}
	if pcu.mutation.MetadataCleared() {
		_spec.ClearField(paymentcustomer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentcustomer.UserTable,
			Columns: []string{paymentcustomer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentcustomer.UserTable,
			Columns: []string{paymentcustomer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PaymentIntentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPaymentIntentsIDs(); len(nodes) > 0 && !pcu.mutation.PaymentIntentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PaymentIntentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !pcu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !pcu.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PaymentCustomerUpdateOne is the builder for updating a single PaymentCustomer entity.
type PaymentCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentCustomerMutation
}

// SetProviderCustomerID sets the "provider_customer_id" field.
func (pcuo *PaymentCustomerUpdateOne) SetProviderCustomerID(s string) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetProviderCustomerID(s)
	return pcuo
}

// SetNillableProviderCustomerID sets the "provider_customer_id" field if the given value is not nil.
func (pcuo *PaymentCustomerUpdateOne) SetNillableProviderCustomerID(s *string) *PaymentCustomerUpdateOne {
	if s != nil {
		pcuo.SetProviderCustomerID(*s)
	}
	return pcuo
}

// SetProvider sets the "provider" field.
func (pcuo *PaymentCustomerUpdateOne) SetProvider(s string) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetProvider(s)
	return pcuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pcuo *PaymentCustomerUpdateOne) SetNillableProvider(s *string) *PaymentCustomerUpdateOne {
	if s != nil {
		pcuo.SetProvider(*s)
	}
	return pcuo
}

// SetEmail sets the "email" field.
func (pcuo *PaymentCustomerUpdateOne) SetEmail(s string) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetEmail(s)
	return pcuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pcuo *PaymentCustomerUpdateOne) SetNillableEmail(s *string) *PaymentCustomerUpdateOne {
	if s != nil {
		pcuo.SetEmail(*s)
	}
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *PaymentCustomerUpdateOne) SetName(s string) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *PaymentCustomerUpdateOne) SetNillableName(s *string) *PaymentCustomerUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// ClearName clears the value of the "name" field.
func (pcuo *PaymentCustomerUpdateOne) ClearName() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearName()
	return pcuo
}

// SetMetadata sets the "metadata" field.
func (pcuo *PaymentCustomerUpdateOne) SetMetadata(m map[string]interface{}) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetMetadata(m)
	return pcuo
}

// ClearMetadata clears the value of the "metadata" field.
func (pcuo *PaymentCustomerUpdateOne) ClearMetadata() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearMetadata()
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PaymentCustomerUpdateOne) SetUpdatedAt(t time.Time) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pcuo *PaymentCustomerUpdateOne) SetUserID(id int) *PaymentCustomerUpdateOne {
	pcuo.mutation.SetUserID(id)
	return pcuo
}

// SetUser sets the "user" edge to the User entity.
func (pcuo *PaymentCustomerUpdateOne) SetUser(u *User) *PaymentCustomerUpdateOne {
	return pcuo.SetUserID(u.ID)
}

// AddPaymentIntentIDs adds the "payment_intents" edge to the PaymentIntent entity by IDs.
func (pcuo *PaymentCustomerUpdateOne) AddPaymentIntentIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.AddPaymentIntentIDs(ids...)
	return pcuo
}

// AddPaymentIntents adds the "payment_intents" edges to the PaymentIntent entity.
func (pcuo *PaymentCustomerUpdateOne) AddPaymentIntents(p ...*PaymentIntent) *PaymentCustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPaymentIntentIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (pcuo *PaymentCustomerUpdateOne) AddSubscriptionIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.AddSubscriptionIDs(ids...)
	return pcuo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (pcuo *PaymentCustomerUpdateOne) AddSubscriptions(s ...*Subscription) *PaymentCustomerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pcuo.AddSubscriptionIDs(ids...)
}

// AddPaymentMethodIDs adds the "payment_methods" edge to the PaymentMethod entity by IDs.
func (pcuo *PaymentCustomerUpdateOne) AddPaymentMethodIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.AddPaymentMethodIDs(ids...)
	return pcuo
}

// AddPaymentMethods adds the "payment_methods" edges to the PaymentMethod entity.
func (pcuo *PaymentCustomerUpdateOne) AddPaymentMethods(p ...*PaymentMethod) *PaymentCustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPaymentMethodIDs(ids...)
}

// Mutation returns the PaymentCustomerMutation object of the builder.
func (pcuo *PaymentCustomerUpdateOne) Mutation() *PaymentCustomerMutation {
	return pcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pcuo *PaymentCustomerUpdateOne) ClearUser() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearUser()
	return pcuo
}

// ClearPaymentIntents clears all "payment_intents" edges to the PaymentIntent entity.
func (pcuo *PaymentCustomerUpdateOne) ClearPaymentIntents() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearPaymentIntents()
	return pcuo
}

// RemovePaymentIntentIDs removes the "payment_intents" edge to PaymentIntent entities by IDs.
func (pcuo *PaymentCustomerUpdateOne) RemovePaymentIntentIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.RemovePaymentIntentIDs(ids...)
	return pcuo
}

// RemovePaymentIntents removes "payment_intents" edges to PaymentIntent entities.
func (pcuo *PaymentCustomerUpdateOne) RemovePaymentIntents(p ...*PaymentIntent) *PaymentCustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePaymentIntentIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (pcuo *PaymentCustomerUpdateOne) ClearSubscriptions() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearSubscriptions()
	return pcuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (pcuo *PaymentCustomerUpdateOne) RemoveSubscriptionIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.RemoveSubscriptionIDs(ids...)
	return pcuo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (pcuo *PaymentCustomerUpdateOne) RemoveSubscriptions(s ...*Subscription) *PaymentCustomerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pcuo.RemoveSubscriptionIDs(ids...)
}

// ClearPaymentMethods clears all "payment_methods" edges to the PaymentMethod entity.
func (pcuo *PaymentCustomerUpdateOne) ClearPaymentMethods() *PaymentCustomerUpdateOne {
	pcuo.mutation.ClearPaymentMethods()
	return pcuo
}

// RemovePaymentMethodIDs removes the "payment_methods" edge to PaymentMethod entities by IDs.
func (pcuo *PaymentCustomerUpdateOne) RemovePaymentMethodIDs(ids ...int) *PaymentCustomerUpdateOne {
	pcuo.mutation.RemovePaymentMethodIDs(ids...)
	return pcuo
}

// RemovePaymentMethods removes "payment_methods" edges to PaymentMethod entities.
func (pcuo *PaymentCustomerUpdateOne) RemovePaymentMethods(p ...*PaymentMethod) *PaymentCustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePaymentMethodIDs(ids...)
}

// Where appends a list predicates to the PaymentCustomerUpdate builder.
func (pcuo *PaymentCustomerUpdateOne) Where(ps ...predicate.PaymentCustomer) *PaymentCustomerUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PaymentCustomerUpdateOne) Select(field string, fields ...string) *PaymentCustomerUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PaymentCustomer entity.
func (pcuo *PaymentCustomerUpdateOne) Save(ctx context.Context) (*PaymentCustomer, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PaymentCustomerUpdateOne) SaveX(ctx context.Context) *PaymentCustomer {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PaymentCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PaymentCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PaymentCustomerUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := paymentcustomer.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PaymentCustomerUpdateOne) check() error {
	if v, ok := pcuo.mutation.ProviderCustomerID(); ok {
		if err := paymentcustomer.ProviderCustomerIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_customer_id", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider_customer_id": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.Provider(); ok {
		if err := paymentcustomer.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.provider": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.Email(); ok {
		if err := paymentcustomer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PaymentCustomer.email": %w`, err)}
		}
	}
	if pcuo.mutation.UserCleared() && len(pcuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentCustomer.user"`)
	}
	return nil
}

func (pcuo *PaymentCustomerUpdateOne) sqlSave(ctx context.Context) (_node *PaymentCustomer, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentcustomer.Table, paymentcustomer.Columns, sqlgraph.NewFieldSpec(paymentcustomer.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentcustomer.FieldID)
		for _, f := range fields {
			if !paymentcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.ProviderCustomerID(); ok {
		_spec.SetField(paymentcustomer.FieldProviderCustomerID, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Provider(); ok {
		_spec.SetField(paymentcustomer.FieldProvider, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Email(); ok {
		_spec.SetField(paymentcustomer.FieldEmail, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(paymentcustomer.FieldName, field.TypeString, value)
	}
	if pcuo.mutation.NameCleared() {
		_spec.ClearField(paymentcustomer.FieldName, field.TypeString)
	}
	if value, ok := pcuo.mutation.Metadata(); ok {
		_spec.SetField(paymentcustomer.FieldMetadata, field.TypeJSON, value)
	}
	if pcuo.mutation.MetadataCleared() {
		_spec.ClearField(paymentcustomer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(paymentcustomer.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentcustomer.UserTable,
			Columns: []string{paymentcustomer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentcustomer.UserTable,
			Columns: []string{paymentcustomer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PaymentIntentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPaymentIntentsIDs(); len(nodes) > 0 && !pcuo.mutation.PaymentIntentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PaymentIntentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentIntentsTable,
			Columns: []string{paymentcustomer.PaymentIntentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentintent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !pcuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.SubscriptionsTable,
			Columns: []string{paymentcustomer.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPaymentMethodsIDs(); len(nodes) > 0 && !pcuo.mutation.PaymentMethodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PaymentMethodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentcustomer.PaymentMethodsTable,
			Columns: []string{paymentcustomer.PaymentMethodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentCustomer{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
