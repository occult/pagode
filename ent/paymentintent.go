// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/occult/pagode/ent/paymentcustomer"
	"github.com/occult/pagode/ent/paymentintent"
)

// PaymentIntent is the model entity for the PaymentIntent schema.
type PaymentIntent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// External payment provider payment intent ID
	ProviderPaymentIntentID string `json:"provider_payment_intent_id,omitempty"`
	// Payment provider name
	Provider string `json:"provider,omitempty"`
	// Payment intent status from provider
	Status paymentintent.Status `json:"status,omitempty"`
	// Amount in smallest currency unit (e.g., cents)
	Amount int64 `json:"amount,omitempty"`
	// Three-letter ISO currency code
	Currency string `json:"currency,omitempty"`
	// Description of the payment
	Description string `json:"description,omitempty"`
	// Client secret for frontend payment processing
	ClientSecret string `json:"-"`
	// Additional payment data
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentIntentQuery when eager-loading is set.
	Edges                            PaymentIntentEdges `json:"edges"`
	payment_customer_payment_intents *int
	selectValues                     sql.SelectValues
}

// PaymentIntentEdges holds the relations/edges for other nodes in the graph.
type PaymentIntentEdges struct {
	// Payment customer who owns this payment intent
	Customer *PaymentCustomer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentIntentEdges) CustomerOrErr() (*PaymentCustomer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: paymentcustomer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentIntent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentintent.FieldMetadata:
			values[i] = new([]byte)
		case paymentintent.FieldID, paymentintent.FieldAmount:
			values[i] = new(sql.NullInt64)
		case paymentintent.FieldProviderPaymentIntentID, paymentintent.FieldProvider, paymentintent.FieldStatus, paymentintent.FieldCurrency, paymentintent.FieldDescription, paymentintent.FieldClientSecret:
			values[i] = new(sql.NullString)
		case paymentintent.FieldCreatedAt, paymentintent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case paymentintent.ForeignKeys[0]: // payment_customer_payment_intents
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentIntent fields.
func (pi *PaymentIntent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentintent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case paymentintent.FieldProviderPaymentIntentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_payment_intent_id", values[i])
			} else if value.Valid {
				pi.ProviderPaymentIntentID = value.String
			}
		case paymentintent.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pi.Provider = value.String
			}
		case paymentintent.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pi.Status = paymentintent.Status(value.String)
			}
		case paymentintent.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pi.Amount = value.Int64
			}
		case paymentintent.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pi.Currency = value.String
			}
		case paymentintent.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = value.String
			}
		case paymentintent.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				pi.ClientSecret = value.String
			}
		case paymentintent.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pi.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case paymentintent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case paymentintent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case paymentintent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_customer_payment_intents", value)
			} else if value.Valid {
				pi.payment_customer_payment_intents = new(int)
				*pi.payment_customer_payment_intents = int(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentIntent.
// This includes values selected through modifiers, order, etc.
func (pi *PaymentIntent) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the PaymentIntent entity.
func (pi *PaymentIntent) QueryCustomer() *PaymentCustomerQuery {
	return NewPaymentIntentClient(pi.config).QueryCustomer(pi)
}

// Update returns a builder for updating this PaymentIntent.
// Note that you need to call PaymentIntent.Unwrap() before calling this method if this PaymentIntent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PaymentIntent) Update() *PaymentIntentUpdateOne {
	return NewPaymentIntentClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PaymentIntent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PaymentIntent) Unwrap() *PaymentIntent {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentIntent is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PaymentIntent) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentIntent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("provider_payment_intent_id=")
	builder.WriteString(pi.ProviderPaymentIntentID)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(pi.Provider)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pi.Status))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pi.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pi.Currency)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pi.Description)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pi.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentIntents is a parsable slice of PaymentIntent.
type PaymentIntents []*PaymentIntent
